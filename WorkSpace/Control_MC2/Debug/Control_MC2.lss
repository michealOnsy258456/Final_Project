
Control_MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002084  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010c  00800060  00002084  00002118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080016c  0080016c  00002224  2**0
                  ALLOC
  3 .stab         00001d4c  00000000  00000000  00002224  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001081  00000000  00000000  00003f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00004ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00005191  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00005383  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000778e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00008b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00009cec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00009eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000a1a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ab10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 1a 0d 	jmp	0x1a34	; 0x1a34 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 e7 0c 	jmp	0x19ce	; 0x19ce <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e8       	ldi	r30, 0x84	; 132
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 37       	cpi	r26, 0x72	; 114
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 07 	call	0xe2e	; 0xe2e <main>
      8a:	0c 94 40 10 	jmp	0x2080	; 0x2080 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 09 10 	jmp	0x2012	; 0x2012 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 25 10 	jmp	0x204a	; 0x204a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 15 10 	jmp	0x202a	; 0x202a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 31 10 	jmp	0x2062	; 0x2062 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 15 10 	jmp	0x202a	; 0x202a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 31 10 	jmp	0x2062	; 0x2062 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 09 10 	jmp	0x2012	; 0x2012 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 25 10 	jmp	0x204a	; 0x204a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 11 10 	jmp	0x2022	; 0x2022 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 2d 10 	jmp	0x205a	; 0x205a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 15 10 	jmp	0x202a	; 0x202a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 31 10 	jmp	0x2062	; 0x2062 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 15 10 	jmp	0x202a	; 0x202a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 31 10 	jmp	0x2062	; 0x2062 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 15 10 	jmp	0x202a	; 0x202a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 31 10 	jmp	0x2062	; 0x2062 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 19 10 	jmp	0x2032	; 0x2032 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 35 10 	jmp	0x206a	; 0x206a <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 11 10 	jmp	0x2022	; 0x2022 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 2d 10 	jmp	0x205a	; 0x205a <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <main>:
/*global variable */
uint8 g_flag=0;
uint8 g_flag1=0;

int main (void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	cb 55       	subi	r28, 0x5B	; 91
     e38:	d0 40       	sbci	r29, 0x00	; 0
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	de bf       	out	0x3e, r29	; 62
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	cd bf       	out	0x3d, r28	; 61
	 * 1- Counter To Count In Loop
	 * 2- Count To Count Data From Array
	 * 3-Receive Data From Uart
	 * 4-Arrays To Save Data
	 * */
	uint8 LOC_u8Counter=0 ;
     e44:	1d ae       	std	Y+61, r1	; 0x3d
	uint8 LOC_u8ToCountData=0 ;
     e46:	1c ae       	std	Y+60, r1	; 0x3c
	uint8 LOC_U8Flag=0;
     e48:	1b ae       	std	Y+59, r1	; 0x3b
	uint8 LOC_u8BuzzerFlag=0;
     e4a:	1a ae       	std	Y+58, r1	; 0x3a
	uint8 Second_Buffer_From_Uart [5];
	uint8 Third_Buffer_From_Uart[8];


	/***************************Configuration*********************************/
	SET_BIT(DDRB,PB7);
     e4c:	a7 e3       	ldi	r26, 0x37	; 55
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e7 e3       	ldi	r30, 0x37	; 55
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	80 68       	ori	r24, 0x80	; 128
     e58:	8c 93       	st	X, r24

	/*Timer*/
	TIM1_Config Config={CTC,F_CLK_1024,OC1A_OFF};
     e5a:	ce 01       	movw	r24, r28
     e5c:	80 5b       	subi	r24, 0xB0	; 176
     e5e:	9f 4f       	sbci	r25, 0xFF	; 255
     e60:	69 96       	adiw	r28, 0x19	; 25
     e62:	9f af       	std	Y+63, r25	; 0x3f
     e64:	8e af       	std	Y+62, r24	; 0x3e
     e66:	69 97       	sbiw	r28, 0x19	; 25
     e68:	88 e6       	ldi	r24, 0x68	; 104
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	6b 96       	adiw	r28, 0x1b	; 27
     e6e:	9f af       	std	Y+63, r25	; 0x3f
     e70:	8e af       	std	Y+62, r24	; 0x3e
     e72:	6b 97       	sbiw	r28, 0x1b	; 27
     e74:	93 e0       	ldi	r25, 0x03	; 3
     e76:	6c 96       	adiw	r28, 0x1c	; 28
     e78:	9f af       	std	Y+63, r25	; 0x3f
     e7a:	6c 97       	sbiw	r28, 0x1c	; 28
     e7c:	6b 96       	adiw	r28, 0x1b	; 27
     e7e:	ee ad       	ldd	r30, Y+62	; 0x3e
     e80:	ff ad       	ldd	r31, Y+63	; 0x3f
     e82:	6b 97       	sbiw	r28, 0x1b	; 27
     e84:	00 80       	ld	r0, Z
     e86:	6b 96       	adiw	r28, 0x1b	; 27
     e88:	8e ad       	ldd	r24, Y+62	; 0x3e
     e8a:	9f ad       	ldd	r25, Y+63	; 0x3f
     e8c:	6b 97       	sbiw	r28, 0x1b	; 27
     e8e:	01 96       	adiw	r24, 0x01	; 1
     e90:	6b 96       	adiw	r28, 0x1b	; 27
     e92:	9f af       	std	Y+63, r25	; 0x3f
     e94:	8e af       	std	Y+62, r24	; 0x3e
     e96:	6b 97       	sbiw	r28, 0x1b	; 27
     e98:	69 96       	adiw	r28, 0x19	; 25
     e9a:	ee ad       	ldd	r30, Y+62	; 0x3e
     e9c:	ff ad       	ldd	r31, Y+63	; 0x3f
     e9e:	69 97       	sbiw	r28, 0x19	; 25
     ea0:	00 82       	st	Z, r0
     ea2:	69 96       	adiw	r28, 0x19	; 25
     ea4:	8e ad       	ldd	r24, Y+62	; 0x3e
     ea6:	9f ad       	ldd	r25, Y+63	; 0x3f
     ea8:	69 97       	sbiw	r28, 0x19	; 25
     eaa:	01 96       	adiw	r24, 0x01	; 1
     eac:	69 96       	adiw	r28, 0x19	; 25
     eae:	9f af       	std	Y+63, r25	; 0x3f
     eb0:	8e af       	std	Y+62, r24	; 0x3e
     eb2:	69 97       	sbiw	r28, 0x19	; 25
     eb4:	6c 96       	adiw	r28, 0x1c	; 28
     eb6:	9f ad       	ldd	r25, Y+63	; 0x3f
     eb8:	6c 97       	sbiw	r28, 0x1c	; 28
     eba:	91 50       	subi	r25, 0x01	; 1
     ebc:	6c 96       	adiw	r28, 0x1c	; 28
     ebe:	9f af       	std	Y+63, r25	; 0x3f
     ec0:	6c 97       	sbiw	r28, 0x1c	; 28
     ec2:	6c 96       	adiw	r28, 0x1c	; 28
     ec4:	ef ad       	ldd	r30, Y+63	; 0x3f
     ec6:	6c 97       	sbiw	r28, 0x1c	; 28
     ec8:	ee 23       	and	r30, r30
     eca:	c1 f6       	brne	.-80     	; 0xe7c <main+0x4e>
	TIMER1_VidInit(&Config ,0,62500);
     ecc:	ce 01       	movw	r24, r28
     ece:	80 5b       	subi	r24, 0xB0	; 176
     ed0:	9f 4f       	sbci	r25, 0xFF	; 255
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	44 e2       	ldi	r20, 0x24	; 36
     ed8:	54 ef       	ldi	r21, 0xF4	; 244
     eda:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <TIMER1_VidInit>
	TIMER1_CTC_SetCallBack(APP_VidTIMER);
     ede:	85 e9       	ldi	r24, 0x95	; 149
     ee0:	9b e0       	ldi	r25, 0x0B	; 11
     ee2:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <TIMER1_CTC_SetCallBack>
	DDRA|=(1<<PA0)|(1<<PA1);
     ee6:	aa e3       	ldi	r26, 0x3A	; 58
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	ea e3       	ldi	r30, 0x3A	; 58
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	83 60       	ori	r24, 0x03	; 3
     ef2:	8c 93       	st	X, r24

	/*LCD*/
	//	LCD_VidInit();
	/*E2prom*/
	E2PROM_VidInit();
     ef4:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <E2PROM_VidInit>
	/*UART*/
	UART_Config config={UART_2StopBit,UART_8Bit,UART_AsyncDouble,UART_Disable};
     ef8:	fe 01       	movw	r30, r28
     efa:	ed 5a       	subi	r30, 0xAD	; 173
     efc:	ff 4f       	sbci	r31, 0xFF	; 255
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	80 83       	st	Z, r24
     f02:	fe 01       	movw	r30, r28
     f04:	ed 5a       	subi	r30, 0xAD	; 173
     f06:	ff 4f       	sbci	r31, 0xFF	; 255
     f08:	83 e0       	ldi	r24, 0x03	; 3
     f0a:	81 83       	std	Z+1, r24	; 0x01
     f0c:	fe 01       	movw	r30, r28
     f0e:	ed 5a       	subi	r30, 0xAD	; 173
     f10:	ff 4f       	sbci	r31, 0xFF	; 255
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	82 83       	std	Z+2, r24	; 0x02
     f16:	fe 01       	movw	r30, r28
     f18:	ed 5a       	subi	r30, 0xAD	; 173
     f1a:	ff 4f       	sbci	r31, 0xFF	; 255
     f1c:	13 82       	std	Z+3, r1	; 0x03
	UART_VidInit(&config,9600);
     f1e:	ce 01       	movw	r24, r28
     f20:	8d 5a       	subi	r24, 0xAD	; 173
     f22:	9f 4f       	sbci	r25, 0xFF	; 255
     f24:	60 e8       	ldi	r22, 0x80	; 128
     f26:	75 e2       	ldi	r23, 0x25	; 37
     f28:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <UART_VidInit>
	/*Send Data To MC1 To Know i am Ready To Work */
	UART_VidSend(M2_READY);
     f2c:	80 e1       	ldi	r24, 0x10	; 16
     f2e:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <UART_VidSend>
     f32:	93 c0       	rjmp	.+294    	; 0x105a <main+0x22c>
		 * 2-Write Data In EEPROM
		 * 3-Save Data In Array
		 * */
		while(LOC_U8Flag==0)
		{
			LOC_U8Flag=1;
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	8b af       	std	Y+59, r24	; 0x3b
			for(LOC_u8Counter=0;LOC_u8Counter<5;LOC_u8Counter++)
     f38:	1d ae       	std	Y+61, r1	; 0x3d
     f3a:	8b c0       	rjmp	.+278    	; 0x1052 <main+0x224>
			{
				Receive_Data_From_Uart =UART_u8Recive();//1LOOP
     f3c:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <UART_u8Recive>
     f40:	89 af       	std	Y+57, r24	; 0x39
				E2PROM_VidWrite((0x0211 & 0x0210)|(LOC_u8Counter+1), Receive_Data_From_Uart);
     f42:	8d ad       	ldd	r24, Y+61	; 0x3d
     f44:	88 2f       	mov	r24, r24
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	01 96       	adiw	r24, 0x01	; 1
     f4a:	80 61       	ori	r24, 0x10	; 16
     f4c:	92 60       	ori	r25, 0x02	; 2
     f4e:	69 ad       	ldd	r22, Y+57	; 0x39
     f50:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <E2PROM_VidWrite>
				First_Buffer_From_Uart[LOC_u8Counter]=Receive_Data_From_Uart;
     f54:	8d ad       	ldd	r24, Y+61	; 0x3d
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	ce 01       	movw	r24, r28
     f5c:	ce 96       	adiw	r24, 0x3e	; 62
     f5e:	fc 01       	movw	r30, r24
     f60:	e2 0f       	add	r30, r18
     f62:	f3 1f       	adc	r31, r19
     f64:	89 ad       	ldd	r24, Y+57	; 0x39
     f66:	80 83       	st	Z, r24
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	a0 ea       	ldi	r26, 0xA0	; 160
     f6e:	b1 e4       	ldi	r27, 0x41	; 65
     f70:	8d ab       	std	Y+53, r24	; 0x35
     f72:	9e ab       	std	Y+54, r25	; 0x36
     f74:	af ab       	std	Y+55, r26	; 0x37
     f76:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f78:	6d a9       	ldd	r22, Y+53	; 0x35
     f7a:	7e a9       	ldd	r23, Y+54	; 0x36
     f7c:	8f a9       	ldd	r24, Y+55	; 0x37
     f7e:	98 ad       	ldd	r25, Y+56	; 0x38
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	4a ef       	ldi	r20, 0xFA	; 250
     f86:	54 e4       	ldi	r21, 0x44	; 68
     f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f8c:	dc 01       	movw	r26, r24
     f8e:	cb 01       	movw	r24, r22
     f90:	89 ab       	std	Y+49, r24	; 0x31
     f92:	9a ab       	std	Y+50, r25	; 0x32
     f94:	ab ab       	std	Y+51, r26	; 0x33
     f96:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f98:	69 a9       	ldd	r22, Y+49	; 0x31
     f9a:	7a a9       	ldd	r23, Y+50	; 0x32
     f9c:	8b a9       	ldd	r24, Y+51	; 0x33
     f9e:	9c a9       	ldd	r25, Y+52	; 0x34
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e8       	ldi	r20, 0x80	; 128
     fa6:	5f e3       	ldi	r21, 0x3F	; 63
     fa8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fac:	88 23       	and	r24, r24
     fae:	2c f4       	brge	.+10     	; 0xfba <main+0x18c>
		__ticks = 1;
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	98 ab       	std	Y+48, r25	; 0x30
     fb6:	8f a7       	std	Y+47, r24	; 0x2f
     fb8:	3f c0       	rjmp	.+126    	; 0x1038 <main+0x20a>
	else if (__tmp > 65535)
     fba:	69 a9       	ldd	r22, Y+49	; 0x31
     fbc:	7a a9       	ldd	r23, Y+50	; 0x32
     fbe:	8b a9       	ldd	r24, Y+51	; 0x33
     fc0:	9c a9       	ldd	r25, Y+52	; 0x34
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	3f ef       	ldi	r19, 0xFF	; 255
     fc6:	4f e7       	ldi	r20, 0x7F	; 127
     fc8:	57 e4       	ldi	r21, 0x47	; 71
     fca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fce:	18 16       	cp	r1, r24
     fd0:	4c f5       	brge	.+82     	; 0x1024 <main+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd2:	6d a9       	ldd	r22, Y+53	; 0x35
     fd4:	7e a9       	ldd	r23, Y+54	; 0x36
     fd6:	8f a9       	ldd	r24, Y+55	; 0x37
     fd8:	98 ad       	ldd	r25, Y+56	; 0x38
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	40 e2       	ldi	r20, 0x20	; 32
     fe0:	51 e4       	ldi	r21, 0x41	; 65
     fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe6:	dc 01       	movw	r26, r24
     fe8:	cb 01       	movw	r24, r22
     fea:	bc 01       	movw	r22, r24
     fec:	cd 01       	movw	r24, r26
     fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff2:	dc 01       	movw	r26, r24
     ff4:	cb 01       	movw	r24, r22
     ff6:	98 ab       	std	Y+48, r25	; 0x30
     ff8:	8f a7       	std	Y+47, r24	; 0x2f
     ffa:	0f c0       	rjmp	.+30     	; 0x101a <main+0x1ec>
     ffc:	88 ec       	ldi	r24, 0xC8	; 200
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	9e a7       	std	Y+46, r25	; 0x2e
    1002:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1004:	8d a5       	ldd	r24, Y+45	; 0x2d
    1006:	9e a5       	ldd	r25, Y+46	; 0x2e
    1008:	01 97       	sbiw	r24, 0x01	; 1
    100a:	f1 f7       	brne	.-4      	; 0x1008 <main+0x1da>
    100c:	9e a7       	std	Y+46, r25	; 0x2e
    100e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1010:	8f a5       	ldd	r24, Y+47	; 0x2f
    1012:	98 a9       	ldd	r25, Y+48	; 0x30
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	98 ab       	std	Y+48, r25	; 0x30
    1018:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    101a:	8f a5       	ldd	r24, Y+47	; 0x2f
    101c:	98 a9       	ldd	r25, Y+48	; 0x30
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	69 f7       	brne	.-38     	; 0xffc <main+0x1ce>
    1022:	14 c0       	rjmp	.+40     	; 0x104c <main+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1024:	69 a9       	ldd	r22, Y+49	; 0x31
    1026:	7a a9       	ldd	r23, Y+50	; 0x32
    1028:	8b a9       	ldd	r24, Y+51	; 0x33
    102a:	9c a9       	ldd	r25, Y+52	; 0x34
    102c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	98 ab       	std	Y+48, r25	; 0x30
    1036:	8f a7       	std	Y+47, r24	; 0x2f
    1038:	8f a5       	ldd	r24, Y+47	; 0x2f
    103a:	98 a9       	ldd	r25, Y+48	; 0x30
    103c:	9c a7       	std	Y+44, r25	; 0x2c
    103e:	8b a7       	std	Y+43, r24	; 0x2b
    1040:	8b a5       	ldd	r24, Y+43	; 0x2b
    1042:	9c a5       	ldd	r25, Y+44	; 0x2c
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	f1 f7       	brne	.-4      	; 0x1044 <main+0x216>
    1048:	9c a7       	std	Y+44, r25	; 0x2c
    104a:	8b a7       	std	Y+43, r24	; 0x2b
		 * 3-Save Data In Array
		 * */
		while(LOC_U8Flag==0)
		{
			LOC_U8Flag=1;
			for(LOC_u8Counter=0;LOC_u8Counter<5;LOC_u8Counter++)
    104c:	8d ad       	ldd	r24, Y+61	; 0x3d
    104e:	8f 5f       	subi	r24, 0xFF	; 255
    1050:	8d af       	std	Y+61, r24	; 0x3d
    1052:	8d ad       	ldd	r24, Y+61	; 0x3d
    1054:	85 30       	cpi	r24, 0x05	; 5
    1056:	08 f4       	brcc	.+2      	; 0x105a <main+0x22c>
    1058:	71 cf       	rjmp	.-286    	; 0xf3c <main+0x10e>
		/*
		 * 1-Receive Data From UART
		 * 2-Write Data In EEPROM
		 * 3-Save Data In Array
		 * */
		while(LOC_U8Flag==0)
    105a:	8b ad       	ldd	r24, Y+59	; 0x3b
    105c:	88 23       	and	r24, r24
    105e:	09 f4       	brne	.+2      	; 0x1062 <main+0x234>
    1060:	69 cf       	rjmp	.-302    	; 0xf34 <main+0x106>
    1062:	18 c0       	rjmp	.+48     	; 0x1094 <main+0x266>
		 * 1-Receive Data From UART
		 * 2-Save Data In Array
		 * */
		while(LOC_U8Flag==1)
		{
			LOC_U8Flag=2;
    1064:	82 e0       	ldi	r24, 0x02	; 2
    1066:	8b af       	std	Y+59, r24	; 0x3b
			for(LOC_u8Counter=0; LOC_u8Counter<5;LOC_u8Counter++)
    1068:	1d ae       	std	Y+61, r1	; 0x3d
    106a:	11 c0       	rjmp	.+34     	; 0x108e <main+0x260>
			{
				Receive_Data_From_Uart=UART_u8Recive();//2 LOOP
    106c:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <UART_u8Recive>
    1070:	89 af       	std	Y+57, r24	; 0x39
				Second_Buffer_From_Uart[LOC_u8Counter]=Receive_Data_From_Uart;
    1072:	8d ad       	ldd	r24, Y+61	; 0x3d
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	ce 01       	movw	r24, r28
    107a:	8d 5b       	subi	r24, 0xBD	; 189
    107c:	9f 4f       	sbci	r25, 0xFF	; 255
    107e:	fc 01       	movw	r30, r24
    1080:	e2 0f       	add	r30, r18
    1082:	f3 1f       	adc	r31, r19
    1084:	89 ad       	ldd	r24, Y+57	; 0x39
    1086:	80 83       	st	Z, r24
		 * 2-Save Data In Array
		 * */
		while(LOC_U8Flag==1)
		{
			LOC_U8Flag=2;
			for(LOC_u8Counter=0; LOC_u8Counter<5;LOC_u8Counter++)
    1088:	8d ad       	ldd	r24, Y+61	; 0x3d
    108a:	8f 5f       	subi	r24, 0xFF	; 255
    108c:	8d af       	std	Y+61, r24	; 0x3d
    108e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1090:	85 30       	cpi	r24, 0x05	; 5
    1092:	60 f3       	brcs	.-40     	; 0x106c <main+0x23e>
		}
		/*
		 * 1-Receive Data From UART
		 * 2-Save Data In Array
		 * */
		while(LOC_U8Flag==1)
    1094:	8b ad       	ldd	r24, Y+59	; 0x3b
    1096:	81 30       	cpi	r24, 0x01	; 1
    1098:	29 f3       	breq	.-54     	; 0x1064 <main+0x236>
    109a:	3d c0       	rjmp	.+122    	; 0x1116 <main+0x2e8>
		 * 5-if true Go Next Step
		 * 6-else False Return To Enter Password
		 * */
		while(LOC_U8Flag==2)
		{
			for(LOC_u8Counter=0 ;LOC_u8Counter<5;LOC_u8Counter++)
    109c:	1d ae       	std	Y+61, r1	; 0x3d
    109e:	1f c0       	rjmp	.+62     	; 0x10de <main+0x2b0>
			{
				if(First_Buffer_From_Uart[LOC_u8Counter]==Second_Buffer_From_Uart[LOC_u8Counter])
    10a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	ce 01       	movw	r24, r28
    10a8:	ce 96       	adiw	r24, 0x3e	; 62
    10aa:	fc 01       	movw	r30, r24
    10ac:	e2 0f       	add	r30, r18
    10ae:	f3 1f       	adc	r31, r19
    10b0:	40 81       	ld	r20, Z
    10b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	ce 01       	movw	r24, r28
    10ba:	8d 5b       	subi	r24, 0xBD	; 189
    10bc:	9f 4f       	sbci	r25, 0xFF	; 255
    10be:	fc 01       	movw	r30, r24
    10c0:	e2 0f       	add	r30, r18
    10c2:	f3 1f       	adc	r31, r19
    10c4:	80 81       	ld	r24, Z
    10c6:	48 17       	cp	r20, r24
    10c8:	21 f4       	brne	.+8      	; 0x10d2 <main+0x2a4>
					LOC_u8ToCountData+=5;
    10ca:	8c ad       	ldd	r24, Y+60	; 0x3c
    10cc:	8b 5f       	subi	r24, 0xFB	; 251
    10ce:	8c af       	std	Y+60, r24	; 0x3c
    10d0:	03 c0       	rjmp	.+6      	; 0x10d8 <main+0x2aa>
				else
					LOC_u8ToCountData+=20;
    10d2:	8c ad       	ldd	r24, Y+60	; 0x3c
    10d4:	8c 5e       	subi	r24, 0xEC	; 236
    10d6:	8c af       	std	Y+60, r24	; 0x3c
		 * 5-if true Go Next Step
		 * 6-else False Return To Enter Password
		 * */
		while(LOC_U8Flag==2)
		{
			for(LOC_u8Counter=0 ;LOC_u8Counter<5;LOC_u8Counter++)
    10d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    10da:	8f 5f       	subi	r24, 0xFF	; 255
    10dc:	8d af       	std	Y+61, r24	; 0x3d
    10de:	8d ad       	ldd	r24, Y+61	; 0x3d
    10e0:	85 30       	cpi	r24, 0x05	; 5
    10e2:	f0 f2       	brcs	.-68     	; 0x10a0 <main+0x272>
				if(First_Buffer_From_Uart[LOC_u8Counter]==Second_Buffer_From_Uart[LOC_u8Counter])
					LOC_u8ToCountData+=5;
				else
					LOC_u8ToCountData+=20;
			}
			if(LOC_u8ToCountData==25)
    10e4:	8c ad       	ldd	r24, Y+60	; 0x3c
    10e6:	89 31       	cpi	r24, 0x19	; 25
    10e8:	29 f4       	brne	.+10     	; 0x10f4 <main+0x2c6>
			{
				UART_VidSend(25);//3
    10ea:	89 e1       	ldi	r24, 0x19	; 25
    10ec:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <UART_VidSend>
				LOC_u8ToCountData=0;
    10f0:	1c ae       	std	Y+60, r1	; 0x3c
    10f2:	07 c0       	rjmp	.+14     	; 0x1102 <main+0x2d4>
			}
			else if(LOC_u8ToCountData!=25)
    10f4:	8c ad       	ldd	r24, Y+60	; 0x3c
    10f6:	89 31       	cpi	r24, 0x19	; 25
    10f8:	21 f0       	breq	.+8      	; 0x1102 <main+0x2d4>
			{
				UART_VidSend(10);//3
    10fa:	8a e0       	ldi	r24, 0x0A	; 10
    10fc:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <UART_VidSend>
				LOC_u8ToCountData=0;
    1100:	1c ae       	std	Y+60, r1	; 0x3c
			}
			Receive_Data_From_Uart=UART_u8Recive();//4
    1102:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <UART_u8Recive>
    1106:	89 af       	std	Y+57, r24	; 0x39
			if(Receive_Data_From_Uart==1)
    1108:	89 ad       	ldd	r24, Y+57	; 0x39
    110a:	81 30       	cpi	r24, 0x01	; 1
    110c:	19 f4       	brne	.+6      	; 0x1114 <main+0x2e6>
				LOC_U8Flag=3;
    110e:	83 e0       	ldi	r24, 0x03	; 3
    1110:	8b af       	std	Y+59, r24	; 0x3b
    1112:	01 c0       	rjmp	.+2      	; 0x1116 <main+0x2e8>
			else
				LOC_U8Flag=0;
    1114:	1b ae       	std	Y+59, r1	; 0x3b
		 * 3-Else False send 10 By UART
		 * 4-Receive Data From UART
		 * 5-if true Go Next Step
		 * 6-else False Return To Enter Password
		 * */
		while(LOC_U8Flag==2)
    1116:	8b ad       	ldd	r24, Y+59	; 0x3b
    1118:	82 30       	cpi	r24, 0x02	; 2
    111a:	09 f4       	brne	.+2      	; 0x111e <main+0x2f0>
    111c:	bf cf       	rjmp	.-130    	; 0x109c <main+0x26e>
    111e:	47 c1       	rjmp	.+654    	; 0x13ae <main+0x580>
		 * 2-if Enter '*'
		 * 3-else Enter '#'
		 */
		while(LOC_U8Flag==3)
		{
			Receive_Data_From_Uart=UART_u8Recive();//5
    1120:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <UART_u8Recive>
    1124:	89 af       	std	Y+57, r24	; 0x39
			if(Receive_Data_From_Uart=='*')
    1126:	89 ad       	ldd	r24, Y+57	; 0x39
    1128:	8a 32       	cpi	r24, 0x2A	; 42
    112a:	09 f0       	breq	.+2      	; 0x112e <main+0x300>
    112c:	55 c0       	rjmp	.+170    	; 0x11d8 <main+0x3aa>
			{
				/*
				 * 1-Receive Data From UART
				 * 2-Save Data In Array
				 * */
				for(LOC_u8Counter=0;LOC_u8Counter<5;LOC_u8Counter++)
    112e:	1d ae       	std	Y+61, r1	; 0x3d
    1130:	11 c0       	rjmp	.+34     	; 0x1154 <main+0x326>
				{
					Receive_Data_From_Uart=UART_u8Recive();//6LOOP
    1132:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <UART_u8Recive>
    1136:	89 af       	std	Y+57, r24	; 0x39
					Second_Buffer_From_Uart[LOC_u8Counter]=Receive_Data_From_Uart;
    1138:	8d ad       	ldd	r24, Y+61	; 0x3d
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	ce 01       	movw	r24, r28
    1140:	8d 5b       	subi	r24, 0xBD	; 189
    1142:	9f 4f       	sbci	r25, 0xFF	; 255
    1144:	fc 01       	movw	r30, r24
    1146:	e2 0f       	add	r30, r18
    1148:	f3 1f       	adc	r31, r19
    114a:	89 ad       	ldd	r24, Y+57	; 0x39
    114c:	80 83       	st	Z, r24
			{
				/*
				 * 1-Receive Data From UART
				 * 2-Save Data In Array
				 * */
				for(LOC_u8Counter=0;LOC_u8Counter<5;LOC_u8Counter++)
    114e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1150:	8f 5f       	subi	r24, 0xFF	; 255
    1152:	8d af       	std	Y+61, r24	; 0x3d
    1154:	8d ad       	ldd	r24, Y+61	; 0x3d
    1156:	85 30       	cpi	r24, 0x05	; 5
    1158:	60 f3       	brcs	.-40     	; 0x1132 <main+0x304>
				 * 3-Else Array Equal Send 10
				 * 4-Receive Data From UARt
				 * 5-if True Go Next Step
				 * 6-Else False repeat
				 * */
				for(LOC_u8Counter=0 ;LOC_u8Counter<5;LOC_u8Counter++)
    115a:	1d ae       	std	Y+61, r1	; 0x3d
    115c:	1f c0       	rjmp	.+62     	; 0x119c <main+0x36e>
				{
					if(First_Buffer_From_Uart[LOC_u8Counter]==Second_Buffer_From_Uart[LOC_u8Counter])
    115e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	ce 01       	movw	r24, r28
    1166:	ce 96       	adiw	r24, 0x3e	; 62
    1168:	fc 01       	movw	r30, r24
    116a:	e2 0f       	add	r30, r18
    116c:	f3 1f       	adc	r31, r19
    116e:	40 81       	ld	r20, Z
    1170:	8d ad       	ldd	r24, Y+61	; 0x3d
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	ce 01       	movw	r24, r28
    1178:	8d 5b       	subi	r24, 0xBD	; 189
    117a:	9f 4f       	sbci	r25, 0xFF	; 255
    117c:	fc 01       	movw	r30, r24
    117e:	e2 0f       	add	r30, r18
    1180:	f3 1f       	adc	r31, r19
    1182:	80 81       	ld	r24, Z
    1184:	48 17       	cp	r20, r24
    1186:	21 f4       	brne	.+8      	; 0x1190 <main+0x362>
						LOC_u8ToCountData+=5;
    1188:	8c ad       	ldd	r24, Y+60	; 0x3c
    118a:	8b 5f       	subi	r24, 0xFB	; 251
    118c:	8c af       	std	Y+60, r24	; 0x3c
    118e:	03 c0       	rjmp	.+6      	; 0x1196 <main+0x368>
					else
						LOC_u8ToCountData+=20;
    1190:	8c ad       	ldd	r24, Y+60	; 0x3c
    1192:	8c 5e       	subi	r24, 0xEC	; 236
    1194:	8c af       	std	Y+60, r24	; 0x3c
				 * 3-Else Array Equal Send 10
				 * 4-Receive Data From UARt
				 * 5-if True Go Next Step
				 * 6-Else False repeat
				 * */
				for(LOC_u8Counter=0 ;LOC_u8Counter<5;LOC_u8Counter++)
    1196:	8d ad       	ldd	r24, Y+61	; 0x3d
    1198:	8f 5f       	subi	r24, 0xFF	; 255
    119a:	8d af       	std	Y+61, r24	; 0x3d
    119c:	8d ad       	ldd	r24, Y+61	; 0x3d
    119e:	85 30       	cpi	r24, 0x05	; 5
    11a0:	f0 f2       	brcs	.-68     	; 0x115e <main+0x330>
					if(First_Buffer_From_Uart[LOC_u8Counter]==Second_Buffer_From_Uart[LOC_u8Counter])
						LOC_u8ToCountData+=5;
					else
						LOC_u8ToCountData+=20;
				}
				if(LOC_u8ToCountData==25)
    11a2:	8c ad       	ldd	r24, Y+60	; 0x3c
    11a4:	89 31       	cpi	r24, 0x19	; 25
    11a6:	29 f4       	brne	.+10     	; 0x11b2 <main+0x384>
				{
					UART_VidSend(25);//7
    11a8:	89 e1       	ldi	r24, 0x19	; 25
    11aa:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <UART_VidSend>
					LOC_u8ToCountData=0;
    11ae:	1c ae       	std	Y+60, r1	; 0x3c
    11b0:	07 c0       	rjmp	.+14     	; 0x11c0 <main+0x392>
				}
				else if(LOC_u8ToCountData!=25)
    11b2:	8c ad       	ldd	r24, Y+60	; 0x3c
    11b4:	89 31       	cpi	r24, 0x19	; 25
    11b6:	21 f0       	breq	.+8      	; 0x11c0 <main+0x392>
				{
					UART_VidSend(10);//7
    11b8:	8a e0       	ldi	r24, 0x0A	; 10
    11ba:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <UART_VidSend>
					LOC_u8ToCountData=0;
    11be:	1c ae       	std	Y+60, r1	; 0x3c
				}
				Receive_Data_From_Uart=UART_u8Recive();//8
    11c0:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <UART_u8Recive>
    11c4:	89 af       	std	Y+57, r24	; 0x39
				if(Receive_Data_From_Uart==1)
    11c6:	89 ad       	ldd	r24, Y+57	; 0x39
    11c8:	81 30       	cpi	r24, 0x01	; 1
    11ca:	19 f4       	brne	.+6      	; 0x11d2 <main+0x3a4>
					LOC_U8Flag=4;
    11cc:	84 e0       	ldi	r24, 0x04	; 4
    11ce:	8b af       	std	Y+59, r24	; 0x3b
    11d0:	ee c0       	rjmp	.+476    	; 0x13ae <main+0x580>
				else
					LOC_U8Flag=3;
    11d2:	83 e0       	ldi	r24, 0x03	; 3
    11d4:	8b af       	std	Y+59, r24	; 0x3b
    11d6:	eb c0       	rjmp	.+470    	; 0x13ae <main+0x580>
			}
			else if (Receive_Data_From_Uart=='#')
    11d8:	89 ad       	ldd	r24, Y+57	; 0x39
    11da:	83 32       	cpi	r24, 0x23	; 35
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <main+0x3b2>
    11de:	e7 c0       	rjmp	.+462    	; 0x13ae <main+0x580>
			{
				/*
				 * 1-Receive Data From Uart
				 * 2-Save Data In Array
				 * */
				for(LOC_u8Counter=0;LOC_u8Counter<5;LOC_u8Counter++)
    11e0:	1d ae       	std	Y+61, r1	; 0x3d
    11e2:	11 c0       	rjmp	.+34     	; 0x1206 <main+0x3d8>
				{
					Receive_Data_From_Uart=UART_u8Recive();//10LOOP
    11e4:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <UART_u8Recive>
    11e8:	89 af       	std	Y+57, r24	; 0x39
					Third_Buffer_From_Uart[LOC_u8Counter]=Receive_Data_From_Uart;
    11ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	ce 01       	movw	r24, r28
    11f2:	88 5b       	subi	r24, 0xB8	; 184
    11f4:	9f 4f       	sbci	r25, 0xFF	; 255
    11f6:	fc 01       	movw	r30, r24
    11f8:	e2 0f       	add	r30, r18
    11fa:	f3 1f       	adc	r31, r19
    11fc:	89 ad       	ldd	r24, Y+57	; 0x39
    11fe:	80 83       	st	Z, r24
			{
				/*
				 * 1-Receive Data From Uart
				 * 2-Save Data In Array
				 * */
				for(LOC_u8Counter=0;LOC_u8Counter<5;LOC_u8Counter++)
    1200:	8d ad       	ldd	r24, Y+61	; 0x3d
    1202:	8f 5f       	subi	r24, 0xFF	; 255
    1204:	8d af       	std	Y+61, r24	; 0x3d
    1206:	8d ad       	ldd	r24, Y+61	; 0x3d
    1208:	85 30       	cpi	r24, 0x05	; 5
    120a:	60 f3       	brcs	.-40     	; 0x11e4 <main+0x3b6>
				 * 3-Else Array Equal Send 10
				 * 4-Receive Data From UARt
				 * 5-if True Go Next Step
				 * 6-Else False repeat And When the counter is to 3 make the alarm
				 * */
				for(LOC_u8Counter=0 ;LOC_u8Counter<5;LOC_u8Counter++)
    120c:	1d ae       	std	Y+61, r1	; 0x3d
    120e:	1f c0       	rjmp	.+62     	; 0x124e <main+0x420>
				{
					if(First_Buffer_From_Uart[LOC_u8Counter]==Third_Buffer_From_Uart[LOC_u8Counter])
    1210:	8d ad       	ldd	r24, Y+61	; 0x3d
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	ce 01       	movw	r24, r28
    1218:	ce 96       	adiw	r24, 0x3e	; 62
    121a:	fc 01       	movw	r30, r24
    121c:	e2 0f       	add	r30, r18
    121e:	f3 1f       	adc	r31, r19
    1220:	40 81       	ld	r20, Z
    1222:	8d ad       	ldd	r24, Y+61	; 0x3d
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	ce 01       	movw	r24, r28
    122a:	88 5b       	subi	r24, 0xB8	; 184
    122c:	9f 4f       	sbci	r25, 0xFF	; 255
    122e:	fc 01       	movw	r30, r24
    1230:	e2 0f       	add	r30, r18
    1232:	f3 1f       	adc	r31, r19
    1234:	80 81       	ld	r24, Z
    1236:	48 17       	cp	r20, r24
    1238:	21 f4       	brne	.+8      	; 0x1242 <main+0x414>
						LOC_u8ToCountData+=5;
    123a:	8c ad       	ldd	r24, Y+60	; 0x3c
    123c:	8b 5f       	subi	r24, 0xFB	; 251
    123e:	8c af       	std	Y+60, r24	; 0x3c
    1240:	03 c0       	rjmp	.+6      	; 0x1248 <main+0x41a>
					else
						LOC_u8ToCountData+=20;
    1242:	8c ad       	ldd	r24, Y+60	; 0x3c
    1244:	8c 5e       	subi	r24, 0xEC	; 236
    1246:	8c af       	std	Y+60, r24	; 0x3c
				 * 3-Else Array Equal Send 10
				 * 4-Receive Data From UARt
				 * 5-if True Go Next Step
				 * 6-Else False repeat And When the counter is to 3 make the alarm
				 * */
				for(LOC_u8Counter=0 ;LOC_u8Counter<5;LOC_u8Counter++)
    1248:	8d ad       	ldd	r24, Y+61	; 0x3d
    124a:	8f 5f       	subi	r24, 0xFF	; 255
    124c:	8d af       	std	Y+61, r24	; 0x3d
    124e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1250:	85 30       	cpi	r24, 0x05	; 5
    1252:	f0 f2       	brcs	.-68     	; 0x1210 <main+0x3e2>
					if(First_Buffer_From_Uart[LOC_u8Counter]==Third_Buffer_From_Uart[LOC_u8Counter])
						LOC_u8ToCountData+=5;
					else
						LOC_u8ToCountData+=20;
				}
				if(LOC_u8ToCountData==25)
    1254:	8c ad       	ldd	r24, Y+60	; 0x3c
    1256:	89 31       	cpi	r24, 0x19	; 25
    1258:	29 f4       	brne	.+10     	; 0x1264 <main+0x436>
				{
					UART_VidSend(25);//11
    125a:	89 e1       	ldi	r24, 0x19	; 25
    125c:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <UART_VidSend>
					LOC_u8ToCountData=0;
    1260:	1c ae       	std	Y+60, r1	; 0x3c
    1262:	07 c0       	rjmp	.+14     	; 0x1272 <main+0x444>
				}
				else if(LOC_u8ToCountData!=25)
    1264:	8c ad       	ldd	r24, Y+60	; 0x3c
    1266:	89 31       	cpi	r24, 0x19	; 25
    1268:	21 f0       	breq	.+8      	; 0x1272 <main+0x444>
				{
					UART_VidSend(10);//11
    126a:	8a e0       	ldi	r24, 0x0A	; 10
    126c:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <UART_VidSend>
					LOC_u8ToCountData=0;
    1270:	1c ae       	std	Y+60, r1	; 0x3c
				}
				Receive_Data_From_Uart=UART_u8Recive();//12
    1272:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <UART_u8Recive>
    1276:	89 af       	std	Y+57, r24	; 0x39
				if(Receive_Data_From_Uart==1)
    1278:	89 ad       	ldd	r24, Y+57	; 0x39
    127a:	81 30       	cpi	r24, 0x01	; 1
    127c:	21 f4       	brne	.+8      	; 0x1286 <main+0x458>
				{
					LOC_U8Flag=5;
    127e:	85 e0       	ldi	r24, 0x05	; 5
    1280:	8b af       	std	Y+59, r24	; 0x3b
					LOC_u8BuzzerFlag=0;
    1282:	1a ae       	std	Y+58, r1	; 0x3a
    1284:	05 c0       	rjmp	.+10     	; 0x1290 <main+0x462>
				}
				else
				{
					LOC_U8Flag=3;
    1286:	83 e0       	ldi	r24, 0x03	; 3
    1288:	8b af       	std	Y+59, r24	; 0x3b
					LOC_u8BuzzerFlag++;
    128a:	8a ad       	ldd	r24, Y+58	; 0x3a
    128c:	8f 5f       	subi	r24, 0xFF	; 255
    128e:	8a af       	std	Y+58, r24	; 0x3a

				}
				if(LOC_u8BuzzerFlag==3)
    1290:	8a ad       	ldd	r24, Y+58	; 0x3a
    1292:	83 30       	cpi	r24, 0x03	; 3
    1294:	09 f0       	breq	.+2      	; 0x1298 <main+0x46a>
    1296:	8b c0       	rjmp	.+278    	; 0x13ae <main+0x580>
				{
					SET_BIT(PORTB,PB7);
    1298:	a8 e3       	ldi	r26, 0x38	; 56
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e8 e3       	ldi	r30, 0x38	; 56
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	80 68       	ori	r24, 0x80	; 128
    12a4:	8c 93       	st	X, r24
					for(LOC_u8Counter=1;LOC_u8Counter<=10;LOC_u8Counter++)
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	8d af       	std	Y+61, r24	; 0x3d
    12aa:	75 c0       	rjmp	.+234    	; 0x1396 <main+0x568>
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	90 e8       	ldi	r25, 0x80	; 128
    12b0:	ab eb       	ldi	r26, 0xBB	; 187
    12b2:	b5 e4       	ldi	r27, 0x45	; 69
    12b4:	8f a3       	std	Y+39, r24	; 0x27
    12b6:	98 a7       	std	Y+40, r25	; 0x28
    12b8:	a9 a7       	std	Y+41, r26	; 0x29
    12ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12bc:	6f a1       	ldd	r22, Y+39	; 0x27
    12be:	78 a5       	ldd	r23, Y+40	; 0x28
    12c0:	89 a5       	ldd	r24, Y+41	; 0x29
    12c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	4a ef       	ldi	r20, 0xFA	; 250
    12ca:	54 e4       	ldi	r21, 0x44	; 68
    12cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	8b a3       	std	Y+35, r24	; 0x23
    12d6:	9c a3       	std	Y+36, r25	; 0x24
    12d8:	ad a3       	std	Y+37, r26	; 0x25
    12da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12dc:	6b a1       	ldd	r22, Y+35	; 0x23
    12de:	7c a1       	ldd	r23, Y+36	; 0x24
    12e0:	8d a1       	ldd	r24, Y+37	; 0x25
    12e2:	9e a1       	ldd	r25, Y+38	; 0x26
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	40 e8       	ldi	r20, 0x80	; 128
    12ea:	5f e3       	ldi	r21, 0x3F	; 63
    12ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12f0:	88 23       	and	r24, r24
    12f2:	2c f4       	brge	.+10     	; 0x12fe <main+0x4d0>
		__ticks = 1;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	9a a3       	std	Y+34, r25	; 0x22
    12fa:	89 a3       	std	Y+33, r24	; 0x21
    12fc:	3f c0       	rjmp	.+126    	; 0x137c <main+0x54e>
	else if (__tmp > 65535)
    12fe:	6b a1       	ldd	r22, Y+35	; 0x23
    1300:	7c a1       	ldd	r23, Y+36	; 0x24
    1302:	8d a1       	ldd	r24, Y+37	; 0x25
    1304:	9e a1       	ldd	r25, Y+38	; 0x26
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	3f ef       	ldi	r19, 0xFF	; 255
    130a:	4f e7       	ldi	r20, 0x7F	; 127
    130c:	57 e4       	ldi	r21, 0x47	; 71
    130e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1312:	18 16       	cp	r1, r24
    1314:	4c f5       	brge	.+82     	; 0x1368 <main+0x53a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1316:	6f a1       	ldd	r22, Y+39	; 0x27
    1318:	78 a5       	ldd	r23, Y+40	; 0x28
    131a:	89 a5       	ldd	r24, Y+41	; 0x29
    131c:	9a a5       	ldd	r25, Y+42	; 0x2a
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	40 e2       	ldi	r20, 0x20	; 32
    1324:	51 e4       	ldi	r21, 0x41	; 65
    1326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	bc 01       	movw	r22, r24
    1330:	cd 01       	movw	r24, r26
    1332:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	9a a3       	std	Y+34, r25	; 0x22
    133c:	89 a3       	std	Y+33, r24	; 0x21
    133e:	0f c0       	rjmp	.+30     	; 0x135e <main+0x530>
    1340:	88 ec       	ldi	r24, 0xC8	; 200
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	98 a3       	std	Y+32, r25	; 0x20
    1346:	8f 8f       	std	Y+31, r24	; 0x1f
    1348:	8f 8d       	ldd	r24, Y+31	; 0x1f
    134a:	98 a1       	ldd	r25, Y+32	; 0x20
    134c:	01 97       	sbiw	r24, 0x01	; 1
    134e:	f1 f7       	brne	.-4      	; 0x134c <main+0x51e>
    1350:	98 a3       	std	Y+32, r25	; 0x20
    1352:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1354:	89 a1       	ldd	r24, Y+33	; 0x21
    1356:	9a a1       	ldd	r25, Y+34	; 0x22
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	9a a3       	std	Y+34, r25	; 0x22
    135c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    135e:	89 a1       	ldd	r24, Y+33	; 0x21
    1360:	9a a1       	ldd	r25, Y+34	; 0x22
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	69 f7       	brne	.-38     	; 0x1340 <main+0x512>
    1366:	14 c0       	rjmp	.+40     	; 0x1390 <main+0x562>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1368:	6b a1       	ldd	r22, Y+35	; 0x23
    136a:	7c a1       	ldd	r23, Y+36	; 0x24
    136c:	8d a1       	ldd	r24, Y+37	; 0x25
    136e:	9e a1       	ldd	r25, Y+38	; 0x26
    1370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	9a a3       	std	Y+34, r25	; 0x22
    137a:	89 a3       	std	Y+33, r24	; 0x21
    137c:	89 a1       	ldd	r24, Y+33	; 0x21
    137e:	9a a1       	ldd	r25, Y+34	; 0x22
    1380:	9e 8f       	std	Y+30, r25	; 0x1e
    1382:	8d 8f       	std	Y+29, r24	; 0x1d
    1384:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1386:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	f1 f7       	brne	.-4      	; 0x1388 <main+0x55a>
    138c:	9e 8f       	std	Y+30, r25	; 0x1e
    138e:	8d 8f       	std	Y+29, r24	; 0x1d
    1390:	8d ad       	ldd	r24, Y+61	; 0x3d
    1392:	8f 5f       	subi	r24, 0xFF	; 255
    1394:	8d af       	std	Y+61, r24	; 0x3d
    1396:	8d ad       	ldd	r24, Y+61	; 0x3d
    1398:	8b 30       	cpi	r24, 0x0B	; 11
    139a:	08 f4       	brcc	.+2      	; 0x139e <main+0x570>
    139c:	87 cf       	rjmp	.-242    	; 0x12ac <main+0x47e>
						_delay_ms(6000);
					LOC_u8BuzzerFlag=0;
    139e:	1a ae       	std	Y+58, r1	; 0x3a
					CLEAR_BIT(PORTB,PB7);
    13a0:	a8 e3       	ldi	r26, 0x38	; 56
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	e8 e3       	ldi	r30, 0x38	; 56
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	8f 77       	andi	r24, 0x7F	; 127
    13ac:	8c 93       	st	X, r24
		/*
		 * 1-Receive Data From UART
		 * 2-if Enter '*'
		 * 3-else Enter '#'
		 */
		while(LOC_U8Flag==3)
    13ae:	8b ad       	ldd	r24, Y+59	; 0x3b
    13b0:	83 30       	cpi	r24, 0x03	; 3
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <main+0x588>
    13b4:	b5 ce       	rjmp	.-662    	; 0x1120 <main+0x2f2>
    13b6:	24 c0       	rjmp	.+72     	; 0x1400 <main+0x5d2>
		 *3-Set I_Bit
		 *4-In While Check Time IS Finish Or Not IF Finish Clear The Flags And I_Bit
		 * */
		while(LOC_U8Flag==4)
		{
			TCNT1=0;
    13b8:	ec e4       	ldi	r30, 0x4C	; 76
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	11 82       	std	Z+1, r1	; 0x01
    13be:	10 82       	st	Z, r1
			SET_BIT(PORTA,PA0);
    13c0:	ab e3       	ldi	r26, 0x3B	; 59
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	eb e3       	ldi	r30, 0x3B	; 59
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	81 60       	ori	r24, 0x01	; 1
    13cc:	8c 93       	st	X, r24
			CLEAR_BIT(PORTA,PA1);
    13ce:	ab e3       	ldi	r26, 0x3B	; 59
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	eb e3       	ldi	r30, 0x3B	; 59
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	8d 7f       	andi	r24, 0xFD	; 253
    13da:	8c 93       	st	X, r24
			g_flag=0;
    13dc:	10 92 6c 01 	sts	0x016C, r1
			sei();
    13e0:	78 94       	sei
			while(g_flag1==0)
    13e2:	80 91 6d 01 	lds	r24, 0x016D
    13e6:	88 23       	and	r24, r24
    13e8:	e1 f3       	breq	.-8      	; 0x13e2 <main+0x5b4>
			{
			}
			LOC_U8Flag=3;
    13ea:	83 e0       	ldi	r24, 0x03	; 3
    13ec:	8b af       	std	Y+59, r24	; 0x3b
			g_flag1=0;
    13ee:	10 92 6d 01 	sts	0x016D, r1
			CLEAR_BIT(SREG,7);
    13f2:	af e5       	ldi	r26, 0x5F	; 95
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	ef e5       	ldi	r30, 0x5F	; 95
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	8f 77       	andi	r24, 0x7F	; 127
    13fe:	8c 93       	st	X, r24
		/*1-Clear TCNT1 In Beginning
		 *2-Clear g_flag In Beginning
		 *3-Set I_Bit
		 *4-In While Check Time IS Finish Or Not IF Finish Clear The Flags And I_Bit
		 * */
		while(LOC_U8Flag==4)
    1400:	8b ad       	ldd	r24, Y+59	; 0x3b
    1402:	84 30       	cpi	r24, 0x04	; 4
    1404:	c9 f2       	breq	.-78     	; 0x13b8 <main+0x58a>
    1406:	8c c1       	rjmp	.+792    	; 0x1720 <main+0x8f2>
		 * 1-Receive Data From UART
		 * 2-Save Data In Array
		 * */
		while(LOC_U8Flag==5)
		{
			LOC_U8Flag=6;
    1408:	86 e0       	ldi	r24, 0x06	; 6
    140a:	8b af       	std	Y+59, r24	; 0x3b
    140c:	8b c0       	rjmp	.+278    	; 0x1524 <main+0x6f6>
			while(LOC_U8Flag==6)
			{
				LOC_U8Flag=7;
    140e:	87 e0       	ldi	r24, 0x07	; 7
    1410:	8b af       	std	Y+59, r24	; 0x3b
				for(LOC_u8Counter=0;LOC_u8Counter<5;LOC_u8Counter++)
    1412:	1d ae       	std	Y+61, r1	; 0x3d
    1414:	83 c0       	rjmp	.+262    	; 0x151c <main+0x6ee>
				{
					Receive_Data_From_Uart =UART_u8Recive();//13LOOP
    1416:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <UART_u8Recive>
    141a:	89 af       	std	Y+57, r24	; 0x39
					Third_Buffer_From_Uart[LOC_u8Counter]=Receive_Data_From_Uart;
    141c:	8d ad       	ldd	r24, Y+61	; 0x3d
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	ce 01       	movw	r24, r28
    1424:	88 5b       	subi	r24, 0xB8	; 184
    1426:	9f 4f       	sbci	r25, 0xFF	; 255
    1428:	fc 01       	movw	r30, r24
    142a:	e2 0f       	add	r30, r18
    142c:	f3 1f       	adc	r31, r19
    142e:	89 ad       	ldd	r24, Y+57	; 0x39
    1430:	80 83       	st	Z, r24
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	a0 ea       	ldi	r26, 0xA0	; 160
    1438:	b1 e4       	ldi	r27, 0x41	; 65
    143a:	89 8f       	std	Y+25, r24	; 0x19
    143c:	9a 8f       	std	Y+26, r25	; 0x1a
    143e:	ab 8f       	std	Y+27, r26	; 0x1b
    1440:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1442:	69 8d       	ldd	r22, Y+25	; 0x19
    1444:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1446:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1448:	9c 8d       	ldd	r25, Y+28	; 0x1c
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	4a ef       	ldi	r20, 0xFA	; 250
    1450:	54 e4       	ldi	r21, 0x44	; 68
    1452:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1456:	dc 01       	movw	r26, r24
    1458:	cb 01       	movw	r24, r22
    145a:	8d 8b       	std	Y+21, r24	; 0x15
    145c:	9e 8b       	std	Y+22, r25	; 0x16
    145e:	af 8b       	std	Y+23, r26	; 0x17
    1460:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1462:	6d 89       	ldd	r22, Y+21	; 0x15
    1464:	7e 89       	ldd	r23, Y+22	; 0x16
    1466:	8f 89       	ldd	r24, Y+23	; 0x17
    1468:	98 8d       	ldd	r25, Y+24	; 0x18
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	40 e8       	ldi	r20, 0x80	; 128
    1470:	5f e3       	ldi	r21, 0x3F	; 63
    1472:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1476:	88 23       	and	r24, r24
    1478:	2c f4       	brge	.+10     	; 0x1484 <main+0x656>
		__ticks = 1;
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	9c 8b       	std	Y+20, r25	; 0x14
    1480:	8b 8b       	std	Y+19, r24	; 0x13
    1482:	3f c0       	rjmp	.+126    	; 0x1502 <main+0x6d4>
	else if (__tmp > 65535)
    1484:	6d 89       	ldd	r22, Y+21	; 0x15
    1486:	7e 89       	ldd	r23, Y+22	; 0x16
    1488:	8f 89       	ldd	r24, Y+23	; 0x17
    148a:	98 8d       	ldd	r25, Y+24	; 0x18
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	3f ef       	ldi	r19, 0xFF	; 255
    1490:	4f e7       	ldi	r20, 0x7F	; 127
    1492:	57 e4       	ldi	r21, 0x47	; 71
    1494:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1498:	18 16       	cp	r1, r24
    149a:	4c f5       	brge	.+82     	; 0x14ee <main+0x6c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    149c:	69 8d       	ldd	r22, Y+25	; 0x19
    149e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	40 e2       	ldi	r20, 0x20	; 32
    14aa:	51 e4       	ldi	r21, 0x41	; 65
    14ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	bc 01       	movw	r22, r24
    14b6:	cd 01       	movw	r24, r26
    14b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14bc:	dc 01       	movw	r26, r24
    14be:	cb 01       	movw	r24, r22
    14c0:	9c 8b       	std	Y+20, r25	; 0x14
    14c2:	8b 8b       	std	Y+19, r24	; 0x13
    14c4:	0f c0       	rjmp	.+30     	; 0x14e4 <main+0x6b6>
    14c6:	88 ec       	ldi	r24, 0xC8	; 200
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	9a 8b       	std	Y+18, r25	; 0x12
    14cc:	89 8b       	std	Y+17, r24	; 0x11
    14ce:	89 89       	ldd	r24, Y+17	; 0x11
    14d0:	9a 89       	ldd	r25, Y+18	; 0x12
    14d2:	01 97       	sbiw	r24, 0x01	; 1
    14d4:	f1 f7       	brne	.-4      	; 0x14d2 <main+0x6a4>
    14d6:	9a 8b       	std	Y+18, r25	; 0x12
    14d8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14da:	8b 89       	ldd	r24, Y+19	; 0x13
    14dc:	9c 89       	ldd	r25, Y+20	; 0x14
    14de:	01 97       	sbiw	r24, 0x01	; 1
    14e0:	9c 8b       	std	Y+20, r25	; 0x14
    14e2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e4:	8b 89       	ldd	r24, Y+19	; 0x13
    14e6:	9c 89       	ldd	r25, Y+20	; 0x14
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	69 f7       	brne	.-38     	; 0x14c6 <main+0x698>
    14ec:	14 c0       	rjmp	.+40     	; 0x1516 <main+0x6e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ee:	6d 89       	ldd	r22, Y+21	; 0x15
    14f0:	7e 89       	ldd	r23, Y+22	; 0x16
    14f2:	8f 89       	ldd	r24, Y+23	; 0x17
    14f4:	98 8d       	ldd	r25, Y+24	; 0x18
    14f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	9c 8b       	std	Y+20, r25	; 0x14
    1500:	8b 8b       	std	Y+19, r24	; 0x13
    1502:	8b 89       	ldd	r24, Y+19	; 0x13
    1504:	9c 89       	ldd	r25, Y+20	; 0x14
    1506:	98 8b       	std	Y+16, r25	; 0x10
    1508:	8f 87       	std	Y+15, r24	; 0x0f
    150a:	8f 85       	ldd	r24, Y+15	; 0x0f
    150c:	98 89       	ldd	r25, Y+16	; 0x10
    150e:	01 97       	sbiw	r24, 0x01	; 1
    1510:	f1 f7       	brne	.-4      	; 0x150e <main+0x6e0>
    1512:	98 8b       	std	Y+16, r25	; 0x10
    1514:	8f 87       	std	Y+15, r24	; 0x0f
		{
			LOC_U8Flag=6;
			while(LOC_U8Flag==6)
			{
				LOC_U8Flag=7;
				for(LOC_u8Counter=0;LOC_u8Counter<5;LOC_u8Counter++)
    1516:	8d ad       	ldd	r24, Y+61	; 0x3d
    1518:	8f 5f       	subi	r24, 0xFF	; 255
    151a:	8d af       	std	Y+61, r24	; 0x3d
    151c:	8d ad       	ldd	r24, Y+61	; 0x3d
    151e:	85 30       	cpi	r24, 0x05	; 5
    1520:	08 f4       	brcc	.+2      	; 0x1524 <main+0x6f6>
    1522:	79 cf       	rjmp	.-270    	; 0x1416 <main+0x5e8>
		 * 2-Save Data In Array
		 * */
		while(LOC_U8Flag==5)
		{
			LOC_U8Flag=6;
			while(LOC_U8Flag==6)
    1524:	8b ad       	ldd	r24, Y+59	; 0x3b
    1526:	86 30       	cpi	r24, 0x06	; 6
    1528:	09 f4       	brne	.+2      	; 0x152c <main+0x6fe>
    152a:	71 cf       	rjmp	.-286    	; 0x140e <main+0x5e0>
    152c:	18 c0       	rjmp	.+48     	; 0x155e <main+0x730>
			 * 1-Receive Data From UART
			 * 2-Save Data In Array
			 * */
			while(LOC_U8Flag==7)
			{
				LOC_U8Flag=2;
    152e:	82 e0       	ldi	r24, 0x02	; 2
    1530:	8b af       	std	Y+59, r24	; 0x3b
				for(LOC_u8Counter=0; LOC_u8Counter<5;LOC_u8Counter++)
    1532:	1d ae       	std	Y+61, r1	; 0x3d
    1534:	11 c0       	rjmp	.+34     	; 0x1558 <main+0x72a>
				{
					Receive_Data_From_Uart=UART_u8Recive();//14 LOOP
    1536:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <UART_u8Recive>
    153a:	89 af       	std	Y+57, r24	; 0x39
					Second_Buffer_From_Uart[LOC_u8Counter]=Receive_Data_From_Uart;
    153c:	8d ad       	ldd	r24, Y+61	; 0x3d
    153e:	28 2f       	mov	r18, r24
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	ce 01       	movw	r24, r28
    1544:	8d 5b       	subi	r24, 0xBD	; 189
    1546:	9f 4f       	sbci	r25, 0xFF	; 255
    1548:	fc 01       	movw	r30, r24
    154a:	e2 0f       	add	r30, r18
    154c:	f3 1f       	adc	r31, r19
    154e:	89 ad       	ldd	r24, Y+57	; 0x39
    1550:	80 83       	st	Z, r24
			 * 2-Save Data In Array
			 * */
			while(LOC_U8Flag==7)
			{
				LOC_U8Flag=2;
				for(LOC_u8Counter=0; LOC_u8Counter<5;LOC_u8Counter++)
    1552:	8d ad       	ldd	r24, Y+61	; 0x3d
    1554:	8f 5f       	subi	r24, 0xFF	; 255
    1556:	8d af       	std	Y+61, r24	; 0x3d
    1558:	8d ad       	ldd	r24, Y+61	; 0x3d
    155a:	85 30       	cpi	r24, 0x05	; 5
    155c:	60 f3       	brcs	.-40     	; 0x1536 <main+0x708>
			}
			/*
			 * 1-Receive Data From UART
			 * 2-Save Data In Array
			 * */
			while(LOC_U8Flag==7)
    155e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1560:	87 30       	cpi	r24, 0x07	; 7
    1562:	29 f3       	breq	.-54     	; 0x152e <main+0x700>
    1564:	d9 c0       	rjmp	.+434    	; 0x1718 <main+0x8ea>
			 * 5-if true Go Next Step
			 * 6-else False Return To Enter Password
			 * */
			while(LOC_U8Flag==2)
			{
				for(LOC_u8Counter=0 ;LOC_u8Counter<5;LOC_u8Counter++)
    1566:	1d ae       	std	Y+61, r1	; 0x3d
    1568:	20 c0       	rjmp	.+64     	; 0x15aa <main+0x77c>
				{
					if(Third_Buffer_From_Uart[LOC_u8Counter]==Second_Buffer_From_Uart[LOC_u8Counter])
    156a:	8d ad       	ldd	r24, Y+61	; 0x3d
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	ce 01       	movw	r24, r28
    1572:	88 5b       	subi	r24, 0xB8	; 184
    1574:	9f 4f       	sbci	r25, 0xFF	; 255
    1576:	fc 01       	movw	r30, r24
    1578:	e2 0f       	add	r30, r18
    157a:	f3 1f       	adc	r31, r19
    157c:	40 81       	ld	r20, Z
    157e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	ce 01       	movw	r24, r28
    1586:	8d 5b       	subi	r24, 0xBD	; 189
    1588:	9f 4f       	sbci	r25, 0xFF	; 255
    158a:	fc 01       	movw	r30, r24
    158c:	e2 0f       	add	r30, r18
    158e:	f3 1f       	adc	r31, r19
    1590:	80 81       	ld	r24, Z
    1592:	48 17       	cp	r20, r24
    1594:	21 f4       	brne	.+8      	; 0x159e <main+0x770>
						LOC_u8ToCountData+=5;
    1596:	8c ad       	ldd	r24, Y+60	; 0x3c
    1598:	8b 5f       	subi	r24, 0xFB	; 251
    159a:	8c af       	std	Y+60, r24	; 0x3c
    159c:	03 c0       	rjmp	.+6      	; 0x15a4 <main+0x776>
					else
						LOC_u8ToCountData+=20;
    159e:	8c ad       	ldd	r24, Y+60	; 0x3c
    15a0:	8c 5e       	subi	r24, 0xEC	; 236
    15a2:	8c af       	std	Y+60, r24	; 0x3c
			 * 5-if true Go Next Step
			 * 6-else False Return To Enter Password
			 * */
			while(LOC_U8Flag==2)
			{
				for(LOC_u8Counter=0 ;LOC_u8Counter<5;LOC_u8Counter++)
    15a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    15a6:	8f 5f       	subi	r24, 0xFF	; 255
    15a8:	8d af       	std	Y+61, r24	; 0x3d
    15aa:	8d ad       	ldd	r24, Y+61	; 0x3d
    15ac:	85 30       	cpi	r24, 0x05	; 5
    15ae:	e8 f2       	brcs	.-70     	; 0x156a <main+0x73c>
					if(Third_Buffer_From_Uart[LOC_u8Counter]==Second_Buffer_From_Uart[LOC_u8Counter])
						LOC_u8ToCountData+=5;
					else
						LOC_u8ToCountData+=20;
				}
				if(LOC_u8ToCountData==25)
    15b0:	8c ad       	ldd	r24, Y+60	; 0x3c
    15b2:	89 31       	cpi	r24, 0x19	; 25
    15b4:	09 f0       	breq	.+2      	; 0x15b8 <main+0x78a>
    15b6:	9e c0       	rjmp	.+316    	; 0x16f4 <main+0x8c6>
				{
					UART_VidSend(25);//15
    15b8:	89 e1       	ldi	r24, 0x19	; 25
    15ba:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <UART_VidSend>
					LOC_u8ToCountData=0;
    15be:	1c ae       	std	Y+60, r1	; 0x3c
					for(LOC_u8Counter=0;LOC_u8Counter<5;LOC_u8Counter++)
    15c0:	1d ae       	std	Y+61, r1	; 0x3d
    15c2:	93 c0       	rjmp	.+294    	; 0x16ea <main+0x8bc>
					{
						Receive_Data_From_Uart=Third_Buffer_From_Uart[LOC_u8Counter];
    15c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	ce 01       	movw	r24, r28
    15cc:	88 5b       	subi	r24, 0xB8	; 184
    15ce:	9f 4f       	sbci	r25, 0xFF	; 255
    15d0:	fc 01       	movw	r30, r24
    15d2:	e2 0f       	add	r30, r18
    15d4:	f3 1f       	adc	r31, r19
    15d6:	80 81       	ld	r24, Z
    15d8:	89 af       	std	Y+57, r24	; 0x39
						E2PROM_VidWrite((0x0211 & 0x0210)|(LOC_u8Counter+1), Receive_Data_From_Uart);
    15da:	8d ad       	ldd	r24, Y+61	; 0x3d
    15dc:	88 2f       	mov	r24, r24
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	01 96       	adiw	r24, 0x01	; 1
    15e2:	80 61       	ori	r24, 0x10	; 16
    15e4:	92 60       	ori	r25, 0x02	; 2
    15e6:	69 ad       	ldd	r22, Y+57	; 0x39
    15e8:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <E2PROM_VidWrite>
						First_Buffer_From_Uart[LOC_u8Counter]=Receive_Data_From_Uart;
    15ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	ce 01       	movw	r24, r28
    15f4:	ce 96       	adiw	r24, 0x3e	; 62
    15f6:	fc 01       	movw	r30, r24
    15f8:	e2 0f       	add	r30, r18
    15fa:	f3 1f       	adc	r31, r19
    15fc:	89 ad       	ldd	r24, Y+57	; 0x39
    15fe:	80 83       	st	Z, r24
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	a0 ea       	ldi	r26, 0xA0	; 160
    1606:	b1 e4       	ldi	r27, 0x41	; 65
    1608:	8b 87       	std	Y+11, r24	; 0x0b
    160a:	9c 87       	std	Y+12, r25	; 0x0c
    160c:	ad 87       	std	Y+13, r26	; 0x0d
    160e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1610:	6b 85       	ldd	r22, Y+11	; 0x0b
    1612:	7c 85       	ldd	r23, Y+12	; 0x0c
    1614:	8d 85       	ldd	r24, Y+13	; 0x0d
    1616:	9e 85       	ldd	r25, Y+14	; 0x0e
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	4a ef       	ldi	r20, 0xFA	; 250
    161e:	54 e4       	ldi	r21, 0x44	; 68
    1620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	8f 83       	std	Y+7, r24	; 0x07
    162a:	98 87       	std	Y+8, r25	; 0x08
    162c:	a9 87       	std	Y+9, r26	; 0x09
    162e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1630:	6f 81       	ldd	r22, Y+7	; 0x07
    1632:	78 85       	ldd	r23, Y+8	; 0x08
    1634:	89 85       	ldd	r24, Y+9	; 0x09
    1636:	9a 85       	ldd	r25, Y+10	; 0x0a
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	40 e8       	ldi	r20, 0x80	; 128
    163e:	5f e3       	ldi	r21, 0x3F	; 63
    1640:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1644:	88 23       	and	r24, r24
    1646:	2c f4       	brge	.+10     	; 0x1652 <main+0x824>
		__ticks = 1;
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	9e 83       	std	Y+6, r25	; 0x06
    164e:	8d 83       	std	Y+5, r24	; 0x05
    1650:	3f c0       	rjmp	.+126    	; 0x16d0 <main+0x8a2>
	else if (__tmp > 65535)
    1652:	6f 81       	ldd	r22, Y+7	; 0x07
    1654:	78 85       	ldd	r23, Y+8	; 0x08
    1656:	89 85       	ldd	r24, Y+9	; 0x09
    1658:	9a 85       	ldd	r25, Y+10	; 0x0a
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	3f ef       	ldi	r19, 0xFF	; 255
    165e:	4f e7       	ldi	r20, 0x7F	; 127
    1660:	57 e4       	ldi	r21, 0x47	; 71
    1662:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1666:	18 16       	cp	r1, r24
    1668:	4c f5       	brge	.+82     	; 0x16bc <main+0x88e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    166a:	6b 85       	ldd	r22, Y+11	; 0x0b
    166c:	7c 85       	ldd	r23, Y+12	; 0x0c
    166e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1670:	9e 85       	ldd	r25, Y+14	; 0x0e
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	40 e2       	ldi	r20, 0x20	; 32
    1678:	51 e4       	ldi	r21, 0x41	; 65
    167a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	bc 01       	movw	r22, r24
    1684:	cd 01       	movw	r24, r26
    1686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	9e 83       	std	Y+6, r25	; 0x06
    1690:	8d 83       	std	Y+5, r24	; 0x05
    1692:	0f c0       	rjmp	.+30     	; 0x16b2 <main+0x884>
    1694:	88 ec       	ldi	r24, 0xC8	; 200
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	9c 83       	std	Y+4, r25	; 0x04
    169a:	8b 83       	std	Y+3, r24	; 0x03
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	9c 81       	ldd	r25, Y+4	; 0x04
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	f1 f7       	brne	.-4      	; 0x16a0 <main+0x872>
    16a4:	9c 83       	std	Y+4, r25	; 0x04
    16a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a8:	8d 81       	ldd	r24, Y+5	; 0x05
    16aa:	9e 81       	ldd	r25, Y+6	; 0x06
    16ac:	01 97       	sbiw	r24, 0x01	; 1
    16ae:	9e 83       	std	Y+6, r25	; 0x06
    16b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b2:	8d 81       	ldd	r24, Y+5	; 0x05
    16b4:	9e 81       	ldd	r25, Y+6	; 0x06
    16b6:	00 97       	sbiw	r24, 0x00	; 0
    16b8:	69 f7       	brne	.-38     	; 0x1694 <main+0x866>
    16ba:	14 c0       	rjmp	.+40     	; 0x16e4 <main+0x8b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16bc:	6f 81       	ldd	r22, Y+7	; 0x07
    16be:	78 85       	ldd	r23, Y+8	; 0x08
    16c0:	89 85       	ldd	r24, Y+9	; 0x09
    16c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	9e 83       	std	Y+6, r25	; 0x06
    16ce:	8d 83       	std	Y+5, r24	; 0x05
    16d0:	8d 81       	ldd	r24, Y+5	; 0x05
    16d2:	9e 81       	ldd	r25, Y+6	; 0x06
    16d4:	9a 83       	std	Y+2, r25	; 0x02
    16d6:	89 83       	std	Y+1, r24	; 0x01
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	9a 81       	ldd	r25, Y+2	; 0x02
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	f1 f7       	brne	.-4      	; 0x16dc <main+0x8ae>
    16e0:	9a 83       	std	Y+2, r25	; 0x02
    16e2:	89 83       	std	Y+1, r24	; 0x01
				}
				if(LOC_u8ToCountData==25)
				{
					UART_VidSend(25);//15
					LOC_u8ToCountData=0;
					for(LOC_u8Counter=0;LOC_u8Counter<5;LOC_u8Counter++)
    16e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    16e6:	8f 5f       	subi	r24, 0xFF	; 255
    16e8:	8d af       	std	Y+61, r24	; 0x3d
    16ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    16ec:	85 30       	cpi	r24, 0x05	; 5
    16ee:	08 f4       	brcc	.+2      	; 0x16f2 <main+0x8c4>
    16f0:	69 cf       	rjmp	.-302    	; 0x15c4 <main+0x796>
    16f2:	07 c0       	rjmp	.+14     	; 0x1702 <main+0x8d4>
						E2PROM_VidWrite((0x0211 & 0x0210)|(LOC_u8Counter+1), Receive_Data_From_Uart);
						First_Buffer_From_Uart[LOC_u8Counter]=Receive_Data_From_Uart;
						_delay_ms(20);
					}
				}
				else if(LOC_u8ToCountData!=25)
    16f4:	8c ad       	ldd	r24, Y+60	; 0x3c
    16f6:	89 31       	cpi	r24, 0x19	; 25
    16f8:	21 f0       	breq	.+8      	; 0x1702 <main+0x8d4>
				{
					UART_VidSend(10);//15
    16fa:	8a e0       	ldi	r24, 0x0A	; 10
    16fc:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <UART_VidSend>
					LOC_u8ToCountData=0;
    1700:	1c ae       	std	Y+60, r1	; 0x3c
				}
				Receive_Data_From_Uart=UART_u8Recive();//16
    1702:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <UART_u8Recive>
    1706:	89 af       	std	Y+57, r24	; 0x39
				if(Receive_Data_From_Uart==1)
    1708:	89 ad       	ldd	r24, Y+57	; 0x39
    170a:	81 30       	cpi	r24, 0x01	; 1
    170c:	19 f4       	brne	.+6      	; 0x1714 <main+0x8e6>
					LOC_U8Flag=3;
    170e:	83 e0       	ldi	r24, 0x03	; 3
    1710:	8b af       	std	Y+59, r24	; 0x3b
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <main+0x8ea>
				else
				{
					LOC_U8Flag=3;
    1714:	83 e0       	ldi	r24, 0x03	; 3
    1716:	8b af       	std	Y+59, r24	; 0x3b
			 * 3-Else False send 10 By UART
			 * 4-Receive Data From UART
			 * 5-if true Go Next Step
			 * 6-else False Return To Enter Password
			 * */
			while(LOC_U8Flag==2)
    1718:	8b ad       	ldd	r24, Y+59	; 0x3b
    171a:	82 30       	cpi	r24, 0x02	; 2
    171c:	09 f4       	brne	.+2      	; 0x1720 <main+0x8f2>
    171e:	23 cf       	rjmp	.-442    	; 0x1566 <main+0x738>
		}
		/*
		 * 1-Receive Data From UART
		 * 2-Save Data In Array
		 * */
		while(LOC_U8Flag==5)
    1720:	8b ad       	ldd	r24, Y+59	; 0x3b
    1722:	85 30       	cpi	r24, 0x05	; 5
    1724:	09 f4       	brne	.+2      	; 0x1728 <main+0x8fa>
    1726:	70 ce       	rjmp	.-800    	; 0x1408 <main+0x5da>
    1728:	98 cc       	rjmp	.-1744   	; 0x105a <main+0x22c>

0000172a <APP_VidTIMER>:
 *1-if Count==5 Clear Two Bit Connected to Motor
 *2-Else Count ==1 Run Motor Clock Wise
 *3- Else count ==3 Run Motor AntiClock Wise
 **/
void APP_VidTIMER(void)
{
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
	g_flag++;
    1732:	80 91 6c 01 	lds	r24, 0x016C
    1736:	8f 5f       	subi	r24, 0xFF	; 255
    1738:	80 93 6c 01 	sts	0x016C, r24
	if(g_flag==5)
    173c:	80 91 6c 01 	lds	r24, 0x016C
    1740:	85 30       	cpi	r24, 0x05	; 5
    1742:	99 f4       	brne	.+38     	; 0x176a <APP_VidTIMER+0x40>
	{
		g_flag=0;
    1744:	10 92 6c 01 	sts	0x016C, r1
		CLEAR_BIT(PORTA,PA0);
    1748:	ab e3       	ldi	r26, 0x3B	; 59
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	eb e3       	ldi	r30, 0x3B	; 59
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	8e 7f       	andi	r24, 0xFE	; 254
    1754:	8c 93       	st	X, r24
		CLEAR_BIT(PORTA,PA1);
    1756:	ab e3       	ldi	r26, 0x3B	; 59
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	eb e3       	ldi	r30, 0x3B	; 59
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	8d 7f       	andi	r24, 0xFD	; 253
    1762:	8c 93       	st	X, r24
		g_flag1=1;
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	80 93 6d 01 	sts	0x016D, r24
	}
	if(g_flag==1)
    176a:	80 91 6c 01 	lds	r24, 0x016C
    176e:	81 30       	cpi	r24, 0x01	; 1
    1770:	79 f4       	brne	.+30     	; 0x1790 <APP_VidTIMER+0x66>
	{
		SET_BIT(PORTA,PA0);
    1772:	ab e3       	ldi	r26, 0x3B	; 59
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	eb e3       	ldi	r30, 0x3B	; 59
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	81 60       	ori	r24, 0x01	; 1
    177e:	8c 93       	st	X, r24
		CLEAR_BIT(PORTA,PA1);
    1780:	ab e3       	ldi	r26, 0x3B	; 59
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	eb e3       	ldi	r30, 0x3B	; 59
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	8d 7f       	andi	r24, 0xFD	; 253
    178c:	8c 93       	st	X, r24
    178e:	12 c0       	rjmp	.+36     	; 0x17b4 <APP_VidTIMER+0x8a>

	}
	else if (g_flag==3)
    1790:	80 91 6c 01 	lds	r24, 0x016C
    1794:	83 30       	cpi	r24, 0x03	; 3
    1796:	71 f4       	brne	.+28     	; 0x17b4 <APP_VidTIMER+0x8a>
	{
		SET_BIT(PORTA,PA1);
    1798:	ab e3       	ldi	r26, 0x3B	; 59
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	eb e3       	ldi	r30, 0x3B	; 59
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	82 60       	ori	r24, 0x02	; 2
    17a4:	8c 93       	st	X, r24
		CLEAR_BIT(PORTA,PA0);
    17a6:	ab e3       	ldi	r26, 0x3B	; 59
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	eb e3       	ldi	r30, 0x3B	; 59
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	8e 7f       	andi	r24, 0xFE	; 254
    17b2:	8c 93       	st	X, r24

	}
}
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret

000017ba <E2PROM_VidInit>:
#include "E2PROM.h"
#include "I2C.h"


void E2PROM_VidInit()
{
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
	I2C_VidInit();
    17c2:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <I2C_VidInit>
}
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <E2PROM_VidWrite>:

void E2PROM_VidWrite(uint16 a_u16Address,uint8 a_u8Data)
{
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	00 d0       	rcall	.+0      	; 0x17d2 <E2PROM_VidWrite+0x6>
    17d2:	0f 92       	push	r0
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	9a 83       	std	Y+2, r25	; 0x02
    17da:	89 83       	std	Y+1, r24	; 0x01
    17dc:	6b 83       	std	Y+3, r22	; 0x03
	I2C_VidStartCondition();
    17de:	0e 94 80 0c 	call	0x1900	; 0x1900 <I2C_VidStartCondition>
	if (I2C_u8GetStatus()!=TW_START)
    17e2:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <I2C_u8GetStatus>
    17e6:	88 30       	cpi	r24, 0x08	; 8
    17e8:	01 f5       	brne	.+64     	; 0x182a <E2PROM_VidWrite+0x5e>
		return ;
	I2C_vidWrite((uint8) (0xA0|((a_u16Address& 0x0700)>>7)));
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	9a 81       	ldd	r25, Y+2	; 0x02
    17ee:	80 70       	andi	r24, 0x00	; 0
    17f0:	97 70       	andi	r25, 0x07	; 7
    17f2:	88 0f       	add	r24, r24
    17f4:	89 2f       	mov	r24, r25
    17f6:	88 1f       	adc	r24, r24
    17f8:	99 0b       	sbc	r25, r25
    17fa:	91 95       	neg	r25
    17fc:	80 6a       	ori	r24, 0xA0	; 160
    17fe:	0e 94 9b 0c 	call	0x1936	; 0x1936 <I2C_vidWrite>
	if (I2C_u8GetStatus()!=TW_MT_SLA_W_ACK)
    1802:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <I2C_u8GetStatus>
    1806:	88 31       	cpi	r24, 0x18	; 24
    1808:	81 f4       	brne	.+32     	; 0x182a <E2PROM_VidWrite+0x5e>
		return ;
	I2C_vidWrite((uint8)( a_u16Address));
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	0e 94 9b 0c 	call	0x1936	; 0x1936 <I2C_vidWrite>
	if (I2C_u8GetStatus()!=TW_MT_DATA_ACK)
    1810:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <I2C_u8GetStatus>
    1814:	88 32       	cpi	r24, 0x28	; 40
    1816:	49 f4       	brne	.+18     	; 0x182a <E2PROM_VidWrite+0x5e>
		return ;
	I2C_vidWrite(a_u8Data);
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	0e 94 9b 0c 	call	0x1936	; 0x1936 <I2C_vidWrite>
	if (I2C_u8GetStatus()!=TW_MT_DATA_ACK)
    181e:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <I2C_u8GetStatus>
    1822:	88 32       	cpi	r24, 0x28	; 40
    1824:	11 f4       	brne	.+4      	; 0x182a <E2PROM_VidWrite+0x5e>
		return ;
	I2C_VidStopCondition();
    1826:	0e 94 90 0c 	call	0x1920	; 0x1920 <I2C_VidStopCondition>
}
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <E2PROM_VidRead>:


void E2PROM_VidRead(uint16 a_u16Address,uint8 * a_u8Data)
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	00 d0       	rcall	.+0      	; 0x183c <E2PROM_VidRead+0x6>
    183c:	00 d0       	rcall	.+0      	; 0x183e <E2PROM_VidRead+0x8>
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	9a 83       	std	Y+2, r25	; 0x02
    1844:	89 83       	std	Y+1, r24	; 0x01
    1846:	7c 83       	std	Y+4, r23	; 0x04
    1848:	6b 83       	std	Y+3, r22	; 0x03

	I2C_VidStartCondition();
    184a:	0e 94 80 0c 	call	0x1900	; 0x1900 <I2C_VidStartCondition>
	if (I2C_u8GetStatus()!=TW_START)
    184e:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <I2C_u8GetStatus>
    1852:	88 30       	cpi	r24, 0x08	; 8
    1854:	c1 f5       	brne	.+112    	; 0x18c6 <E2PROM_VidRead+0x90>
		return ;

	I2C_vidWrite((uint8) 0xA0|((a_u16Address& 0x0700)>>7));
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	9a 81       	ldd	r25, Y+2	; 0x02
    185a:	80 70       	andi	r24, 0x00	; 0
    185c:	97 70       	andi	r25, 0x07	; 7
    185e:	88 0f       	add	r24, r24
    1860:	89 2f       	mov	r24, r25
    1862:	88 1f       	adc	r24, r24
    1864:	99 0b       	sbc	r25, r25
    1866:	91 95       	neg	r25
    1868:	80 6a       	ori	r24, 0xA0	; 160
    186a:	0e 94 9b 0c 	call	0x1936	; 0x1936 <I2C_vidWrite>
	if (I2C_u8GetStatus()!=TW_MT_SLA_W_ACK)
    186e:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <I2C_u8GetStatus>
    1872:	88 31       	cpi	r24, 0x18	; 24
    1874:	41 f5       	brne	.+80     	; 0x18c6 <E2PROM_VidRead+0x90>
		return ;

	I2C_vidWrite((uint8)( a_u16Address));
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	0e 94 9b 0c 	call	0x1936	; 0x1936 <I2C_vidWrite>
	if (I2C_u8GetStatus()!=TW_MT_DATA_ACK)
    187c:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <I2C_u8GetStatus>
    1880:	88 32       	cpi	r24, 0x28	; 40
    1882:	09 f5       	brne	.+66     	; 0x18c6 <E2PROM_VidRead+0x90>
		return ;

	I2C_VidStartCondition();
    1884:	0e 94 80 0c 	call	0x1900	; 0x1900 <I2C_VidStartCondition>
	if (I2C_u8GetStatus()!=TW_REP_START)
    1888:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <I2C_u8GetStatus>
    188c:	80 31       	cpi	r24, 0x10	; 16
    188e:	d9 f4       	brne	.+54     	; 0x18c6 <E2PROM_VidRead+0x90>
		return ;

	I2C_vidWrite((uint8) 0xA0|(((a_u16Address& 0x0700)>>7)|1));
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	9a 81       	ldd	r25, Y+2	; 0x02
    1894:	80 70       	andi	r24, 0x00	; 0
    1896:	97 70       	andi	r25, 0x07	; 7
    1898:	88 0f       	add	r24, r24
    189a:	89 2f       	mov	r24, r25
    189c:	88 1f       	adc	r24, r24
    189e:	99 0b       	sbc	r25, r25
    18a0:	91 95       	neg	r25
    18a2:	81 6a       	ori	r24, 0xA1	; 161
    18a4:	0e 94 9b 0c 	call	0x1936	; 0x1936 <I2C_vidWrite>
	if (I2C_u8GetStatus()!=TW_MT_SLA_R_ACK)
    18a8:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <I2C_u8GetStatus>
    18ac:	80 34       	cpi	r24, 0x40	; 64
    18ae:	59 f4       	brne	.+22     	; 0x18c6 <E2PROM_VidRead+0x90>
		return ;

	*a_u8Data=I2C_VidReadWithNoAcknowledge();
    18b0:	0e 94 c5 0c 	call	0x198a	; 0x198a <I2C_VidReadWithNoAcknowledge>
    18b4:	eb 81       	ldd	r30, Y+3	; 0x03
    18b6:	fc 81       	ldd	r31, Y+4	; 0x04
    18b8:	80 83       	st	Z, r24
	if (I2C_u8GetStatus()!=TW_MR_DATA_NACK)
    18ba:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <I2C_u8GetStatus>
    18be:	88 35       	cpi	r24, 0x58	; 88
    18c0:	11 f4       	brne	.+4      	; 0x18c6 <E2PROM_VidRead+0x90>
		return ;

	I2C_VidStopCondition();
    18c2:	0e 94 90 0c 	call	0x1920	; 0x1920 <I2C_VidStopCondition>
}
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	cf 91       	pop	r28
    18d0:	df 91       	pop	r29
    18d2:	08 95       	ret

000018d4 <I2C_VidInit>:
 */

#include "I2C.h"

void I2C_VidInit()
{
    18d4:	df 93       	push	r29
    18d6:	cf 93       	push	r28
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
	/*Bit Rate = 400 kbps   TWPS=00   F_CPU=8MHZ*/
	TWSR = 0;
    18dc:	e1 e2       	ldi	r30, 0x21	; 33
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	10 82       	st	Z, r1
	TWBR=0x02;
    18e2:	e0 e2       	ldi	r30, 0x20	; 32
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	82 e0       	ldi	r24, 0x02	; 2
    18e8:	80 83       	st	Z, r24
	/* address when he become slave 0b00000010*/
	TWAR=0b00000010;
    18ea:	e2 e2       	ldi	r30, 0x22	; 34
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	82 e0       	ldi	r24, 0x02	; 2
    18f0:	80 83       	st	Z, r24
	/*enable I2C*/
	TWCR=(1<<TWEN);
    18f2:	e6 e5       	ldi	r30, 0x56	; 86
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	84 e0       	ldi	r24, 0x04	; 4
    18f8:	80 83       	st	Z, r24
}
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	08 95       	ret

00001900 <I2C_VidStartCondition>:

void I2C_VidStartCondition()
{
    1900:	df 93       	push	r29
    1902:	cf 93       	push	r28
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1908:	e6 e5       	ldi	r30, 0x56	; 86
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	84 ea       	ldi	r24, 0xA4	; 164
    190e:	80 83       	st	Z, r24

	while(BIT_IS_CLEAR(TWCR,TWINT));
    1910:	e6 e5       	ldi	r30, 0x56	; 86
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	88 23       	and	r24, r24
    1918:	dc f7       	brge	.-10     	; 0x1910 <I2C_VidStartCondition+0x10>
}
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	08 95       	ret

00001920 <I2C_VidStopCondition>:

void I2C_VidStopCondition()
{
    1920:	df 93       	push	r29
    1922:	cf 93       	push	r28
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    1928:	e6 e5       	ldi	r30, 0x56	; 86
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	84 e9       	ldi	r24, 0x94	; 148
    192e:	80 83       	st	Z, r24
}
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	08 95       	ret

00001936 <I2C_vidWrite>:

void I2C_vidWrite(uint8 a_Data)
{
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	0f 92       	push	r0
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
    1940:	89 83       	std	Y+1, r24	; 0x01
	TWDR=a_Data;
    1942:	e3 e2       	ldi	r30, 0x23	; 35
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	80 83       	st	Z, r24
	TWCR=(1<<TWINT)|(1<<TWEN);
    194a:	e6 e5       	ldi	r30, 0x56	; 86
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	84 e8       	ldi	r24, 0x84	; 132
    1950:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1952:	e6 e5       	ldi	r30, 0x56	; 86
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	88 23       	and	r24, r24
    195a:	dc f7       	brge	.-10     	; 0x1952 <I2C_vidWrite+0x1c>
}
    195c:	0f 90       	pop	r0
    195e:	cf 91       	pop	r28
    1960:	df 91       	pop	r29
    1962:	08 95       	ret

00001964 <I2C_VidReadWithAcknowledge>:

uint8 I2C_VidReadWithAcknowledge()
{
    1964:	df 93       	push	r29
    1966:	cf 93       	push	r28
    1968:	cd b7       	in	r28, 0x3d	; 61
    196a:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEA)|(1<<TWEN);
    196c:	e6 e5       	ldi	r30, 0x56	; 86
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	84 ec       	ldi	r24, 0xC4	; 196
    1972:	80 83       	st	Z, r24

	while(BIT_IS_CLEAR(TWCR,TWINT));
    1974:	e6 e5       	ldi	r30, 0x56	; 86
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	88 23       	and	r24, r24
    197c:	dc f7       	brge	.-10     	; 0x1974 <I2C_VidReadWithAcknowledge+0x10>
	return TWDR;
    197e:	e3 e2       	ldi	r30, 0x23	; 35
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
}
    1984:	cf 91       	pop	r28
    1986:	df 91       	pop	r29
    1988:	08 95       	ret

0000198a <I2C_VidReadWithNoAcknowledge>:

uint8 I2C_VidReadWithNoAcknowledge()
{
    198a:	df 93       	push	r29
    198c:	cf 93       	push	r28
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEN);
    1992:	e6 e5       	ldi	r30, 0x56	; 86
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	84 e8       	ldi	r24, 0x84	; 132
    1998:	80 83       	st	Z, r24

	while(BIT_IS_CLEAR(TWCR,TWINT));
    199a:	e6 e5       	ldi	r30, 0x56	; 86
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	88 23       	and	r24, r24
    19a2:	dc f7       	brge	.-10     	; 0x199a <I2C_VidReadWithNoAcknowledge+0x10>
	return TWDR;
    19a4:	e3 e2       	ldi	r30, 0x23	; 35
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
}
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	08 95       	ret

000019b0 <I2C_u8GetStatus>:

uint8 I2C_u8GetStatus()
{
    19b0:	df 93       	push	r29
    19b2:	cf 93       	push	r28
    19b4:	0f 92       	push	r0
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
	uint8 Status;
	Status = TWSR & 0xF8;
    19ba:	e1 e2       	ldi	r30, 0x21	; 33
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	88 7f       	andi	r24, 0xF8	; 248
    19c2:	89 83       	std	Y+1, r24	; 0x01
	return Status;
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    19c6:	0f 90       	pop	r0
    19c8:	cf 91       	pop	r28
    19ca:	df 91       	pop	r29
    19cc:	08 95       	ret

000019ce <__vector_9>:
#include "Timer1.h"
static void (*g_timer1ctcCallBackPtr)(void)=NULL_PTR;
static void (*g_timer1ovfCallBackPtr)(void)=NULL_PTR;

ISR(TIMER1_OVF_vect)
{
    19ce:	1f 92       	push	r1
    19d0:	0f 92       	push	r0
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	0f 92       	push	r0
    19d6:	11 24       	eor	r1, r1
    19d8:	2f 93       	push	r18
    19da:	3f 93       	push	r19
    19dc:	4f 93       	push	r20
    19de:	5f 93       	push	r21
    19e0:	6f 93       	push	r22
    19e2:	7f 93       	push	r23
    19e4:	8f 93       	push	r24
    19e6:	9f 93       	push	r25
    19e8:	af 93       	push	r26
    19ea:	bf 93       	push	r27
    19ec:	ef 93       	push	r30
    19ee:	ff 93       	push	r31
    19f0:	df 93       	push	r29
    19f2:	cf 93       	push	r28
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1ovfCallBackPtr!=NULL_PTR)
    19f8:	80 91 70 01 	lds	r24, 0x0170
    19fc:	90 91 71 01 	lds	r25, 0x0171
    1a00:	00 97       	sbiw	r24, 0x00	; 0
    1a02:	29 f0       	breq	.+10     	; 0x1a0e <__vector_9+0x40>
	{
		(*g_timer1ovfCallBackPtr)();
    1a04:	e0 91 70 01 	lds	r30, 0x0170
    1a08:	f0 91 71 01 	lds	r31, 0x0171
    1a0c:	09 95       	icall
	}
}
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	ff 91       	pop	r31
    1a14:	ef 91       	pop	r30
    1a16:	bf 91       	pop	r27
    1a18:	af 91       	pop	r26
    1a1a:	9f 91       	pop	r25
    1a1c:	8f 91       	pop	r24
    1a1e:	7f 91       	pop	r23
    1a20:	6f 91       	pop	r22
    1a22:	5f 91       	pop	r21
    1a24:	4f 91       	pop	r20
    1a26:	3f 91       	pop	r19
    1a28:	2f 91       	pop	r18
    1a2a:	0f 90       	pop	r0
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	0f 90       	pop	r0
    1a30:	1f 90       	pop	r1
    1a32:	18 95       	reti

00001a34 <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
    1a34:	1f 92       	push	r1
    1a36:	0f 92       	push	r0
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	0f 92       	push	r0
    1a3c:	11 24       	eor	r1, r1
    1a3e:	2f 93       	push	r18
    1a40:	3f 93       	push	r19
    1a42:	4f 93       	push	r20
    1a44:	5f 93       	push	r21
    1a46:	6f 93       	push	r22
    1a48:	7f 93       	push	r23
    1a4a:	8f 93       	push	r24
    1a4c:	9f 93       	push	r25
    1a4e:	af 93       	push	r26
    1a50:	bf 93       	push	r27
    1a52:	ef 93       	push	r30
    1a54:	ff 93       	push	r31
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1ctcCallBackPtr!=NULL_PTR)
    1a5e:	80 91 6e 01 	lds	r24, 0x016E
    1a62:	90 91 6f 01 	lds	r25, 0x016F
    1a66:	00 97       	sbiw	r24, 0x00	; 0
    1a68:	29 f0       	breq	.+10     	; 0x1a74 <__vector_7+0x40>
	{
		(*g_timer1ctcCallBackPtr)();
    1a6a:	e0 91 6e 01 	lds	r30, 0x016E
    1a6e:	f0 91 6f 01 	lds	r31, 0x016F
    1a72:	09 95       	icall
	}
}
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	ff 91       	pop	r31
    1a7a:	ef 91       	pop	r30
    1a7c:	bf 91       	pop	r27
    1a7e:	af 91       	pop	r26
    1a80:	9f 91       	pop	r25
    1a82:	8f 91       	pop	r24
    1a84:	7f 91       	pop	r23
    1a86:	6f 91       	pop	r22
    1a88:	5f 91       	pop	r21
    1a8a:	4f 91       	pop	r20
    1a8c:	3f 91       	pop	r19
    1a8e:	2f 91       	pop	r18
    1a90:	0f 90       	pop	r0
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	0f 90       	pop	r0
    1a96:	1f 90       	pop	r1
    1a98:	18 95       	reti

00001a9a <TIMER1_VidInit>:
void TIMER1_VidInit(TIM1_Config * a_ptr,uint16 a_SetInitialValue,uint16 a_SetCompare)
{
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	00 d0       	rcall	.+0      	; 0x1aa0 <TIMER1_VidInit+0x6>
    1aa0:	00 d0       	rcall	.+0      	; 0x1aa2 <TIMER1_VidInit+0x8>
    1aa2:	00 d0       	rcall	.+0      	; 0x1aa4 <TIMER1_VidInit+0xa>
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
    1aa8:	9a 83       	std	Y+2, r25	; 0x02
    1aaa:	89 83       	std	Y+1, r24	; 0x01
    1aac:	7c 83       	std	Y+4, r23	; 0x04
    1aae:	6b 83       	std	Y+3, r22	; 0x03
    1ab0:	5e 83       	std	Y+6, r21	; 0x06
    1ab2:	4d 83       	std	Y+5, r20	; 0x05
	if((a_ptr->mode)==NORMAL)
    1ab4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ab8:	80 81       	ld	r24, Z
    1aba:	88 23       	and	r24, r24
    1abc:	d9 f4       	brne	.+54     	; 0x1af4 <TIMER1_VidInit+0x5a>
	{
		TCNT1=a_SetInitialValue;
    1abe:	ec e4       	ldi	r30, 0x4C	; 76
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac6:	91 83       	std	Z+1, r25	; 0x01
    1ac8:	80 83       	st	Z, r24
		TCCR1A=(1<<FOC1A)|(1<<FOC1B);
    1aca:	ef e4       	ldi	r30, 0x4F	; 79
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	8c e0       	ldi	r24, 0x0C	; 12
    1ad0:	80 83       	st	Z, r24
		TCCR1B=(TCCR1B & 0xF8)|(a_ptr->Clk);
    1ad2:	ae e4       	ldi	r26, 0x4E	; 78
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	ee e4       	ldi	r30, 0x4E	; 78
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	98 2f       	mov	r25, r24
    1ade:	98 7f       	andi	r25, 0xF8	; 248
    1ae0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ae4:	81 81       	ldd	r24, Z+1	; 0x01
    1ae6:	89 2b       	or	r24, r25
    1ae8:	8c 93       	st	X, r24
		TIMSK=(1<<TOIE1);
    1aea:	e9 e5       	ldi	r30, 0x59	; 89
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	84 e0       	ldi	r24, 0x04	; 4
    1af0:	80 83       	st	Z, r24
    1af2:	f4 c0       	rjmp	.+488    	; 0x1cdc <TIMER1_VidInit+0x242>
	}
	else if((a_ptr->mode)==CTC)
    1af4:	e9 81       	ldd	r30, Y+1	; 0x01
    1af6:	fa 81       	ldd	r31, Y+2	; 0x02
    1af8:	80 81       	ld	r24, Z
    1afa:	81 30       	cpi	r24, 0x01	; 1
    1afc:	09 f0       	breq	.+2      	; 0x1b00 <TIMER1_VidInit+0x66>
    1afe:	7a c0       	rjmp	.+244    	; 0x1bf4 <TIMER1_VidInit+0x15a>
	{
		if (a_ptr->Oc1A==OC1A_OFF)
    1b00:	e9 81       	ldd	r30, Y+1	; 0x01
    1b02:	fa 81       	ldd	r31, Y+2	; 0x02
    1b04:	82 81       	ldd	r24, Z+2	; 0x02
    1b06:	88 23       	and	r24, r24
    1b08:	41 f4       	brne	.+16     	; 0x1b1a <TIMER1_VidInit+0x80>
		{
			TCCR1A &= ~(1<<COM1A1)&(~(1<<COM1A0))&(~(1<<COM1B1))&(~(1<<COM1B0));
    1b0a:	af e4       	ldi	r26, 0x4F	; 79
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	ef e4       	ldi	r30, 0x4F	; 79
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	8f 70       	andi	r24, 0x0F	; 15
    1b16:	8c 93       	st	X, r24
    1b18:	34 c0       	rjmp	.+104    	; 0x1b82 <TIMER1_VidInit+0xe8>
		}
		else if(a_ptr->Oc1A==OC1A_TOG)
    1b1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b1e:	82 81       	ldd	r24, Z+2	; 0x02
    1b20:	81 30       	cpi	r24, 0x01	; 1
    1b22:	79 f4       	brne	.+30     	; 0x1b42 <TIMER1_VidInit+0xa8>
		{
			TCCR1A &= ~(1<<COM1A1)&(~(1<<COM1B1));
    1b24:	af e4       	ldi	r26, 0x4F	; 79
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	ef e4       	ldi	r30, 0x4F	; 79
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	8f 75       	andi	r24, 0x5F	; 95
    1b30:	8c 93       	st	X, r24
			TCCR1A |= (1<<COM1A0)|(1<<COM1B0);
    1b32:	af e4       	ldi	r26, 0x4F	; 79
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	ef e4       	ldi	r30, 0x4F	; 79
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	80 65       	ori	r24, 0x50	; 80
    1b3e:	8c 93       	st	X, r24
    1b40:	20 c0       	rjmp	.+64     	; 0x1b82 <TIMER1_VidInit+0xe8>
		}
		else if(a_ptr->Oc1A==OC1A_CLR)
    1b42:	e9 81       	ldd	r30, Y+1	; 0x01
    1b44:	fa 81       	ldd	r31, Y+2	; 0x02
    1b46:	82 81       	ldd	r24, Z+2	; 0x02
    1b48:	82 30       	cpi	r24, 0x02	; 2
    1b4a:	79 f4       	brne	.+30     	; 0x1b6a <TIMER1_VidInit+0xd0>
		{
			TCCR1A &= ~(1<<COM1A0)&(~(1<<COM1B0));
    1b4c:	af e4       	ldi	r26, 0x4F	; 79
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	ef e4       	ldi	r30, 0x4F	; 79
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	8f 7a       	andi	r24, 0xAF	; 175
    1b58:	8c 93       	st	X, r24
			TCCR1A |= (1<<COM1A1)|(1<<COM1B1);
    1b5a:	af e4       	ldi	r26, 0x4F	; 79
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	ef e4       	ldi	r30, 0x4F	; 79
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	80 6a       	ori	r24, 0xA0	; 160
    1b66:	8c 93       	st	X, r24
    1b68:	0c c0       	rjmp	.+24     	; 0x1b82 <TIMER1_VidInit+0xe8>
		}
		else if(a_ptr->Oc1A==OC1A_CLR)
    1b6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b6e:	82 81       	ldd	r24, Z+2	; 0x02
    1b70:	82 30       	cpi	r24, 0x02	; 2
    1b72:	39 f4       	brne	.+14     	; 0x1b82 <TIMER1_VidInit+0xe8>
		{
			TCCR1A |= (1<<COM1A1)|(1<<COM1A0)|(1<<COM1B1)|(1<<COM1B0);
    1b74:	af e4       	ldi	r26, 0x4F	; 79
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	ef e4       	ldi	r30, 0x4F	; 79
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	80 6f       	ori	r24, 0xF0	; 240
    1b80:	8c 93       	st	X, r24
		}
		TCCR1A|=(1<<FOC1A)|(1<<FOC1B);
    1b82:	af e4       	ldi	r26, 0x4F	; 79
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	ef e4       	ldi	r30, 0x4F	; 79
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	8c 60       	ori	r24, 0x0C	; 12
    1b8e:	8c 93       	st	X, r24
		TCCR1B=(TCCR1B & 0xF8)|(a_ptr->Clk);
    1b90:	ae e4       	ldi	r26, 0x4E	; 78
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	ee e4       	ldi	r30, 0x4E	; 78
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	98 2f       	mov	r25, r24
    1b9c:	98 7f       	andi	r25, 0xF8	; 248
    1b9e:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ba2:	81 81       	ldd	r24, Z+1	; 0x01
    1ba4:	89 2b       	or	r24, r25
    1ba6:	8c 93       	st	X, r24
		TCNT1=a_SetInitialValue;
    1ba8:	ec e4       	ldi	r30, 0x4C	; 76
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb0:	91 83       	std	Z+1, r25	; 0x01
    1bb2:	80 83       	st	Z, r24
		SET_BIT(TIMSK,OCIE1A);
    1bb4:	a9 e5       	ldi	r26, 0x59	; 89
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	e9 e5       	ldi	r30, 0x59	; 89
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	80 61       	ori	r24, 0x10	; 16
    1bc0:	8c 93       	st	X, r24
		SET_BIT(DDRD,PD5);
    1bc2:	a1 e3       	ldi	r26, 0x31	; 49
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	e1 e3       	ldi	r30, 0x31	; 49
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	80 62       	ori	r24, 0x20	; 32
    1bce:	8c 93       	st	X, r24
		TCCR1B|=(1<<WGM12);
    1bd0:	ae e4       	ldi	r26, 0x4E	; 78
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	ee e4       	ldi	r30, 0x4E	; 78
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	88 60       	ori	r24, 0x08	; 8
    1bdc:	8c 93       	st	X, r24
		OCR1A=a_SetCompare;
    1bde:	ea e4       	ldi	r30, 0x4A	; 74
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	8d 81       	ldd	r24, Y+5	; 0x05
    1be4:	9e 81       	ldd	r25, Y+6	; 0x06
    1be6:	91 83       	std	Z+1, r25	; 0x01
    1be8:	80 83       	st	Z, r24
		TIMSK= (1<<OCIE1A);
    1bea:	e9 e5       	ldi	r30, 0x59	; 89
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 e1       	ldi	r24, 0x10	; 16
    1bf0:	80 83       	st	Z, r24
    1bf2:	74 c0       	rjmp	.+232    	; 0x1cdc <TIMER1_VidInit+0x242>
	}
	else if((a_ptr->mode)==PWM)
    1bf4:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf6:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf8:	80 81       	ld	r24, Z
    1bfa:	82 30       	cpi	r24, 0x02	; 2
    1bfc:	09 f0       	breq	.+2      	; 0x1c00 <TIMER1_VidInit+0x166>
    1bfe:	6e c0       	rjmp	.+220    	; 0x1cdc <TIMER1_VidInit+0x242>
	{
		if (a_ptr->Oc1A==OC1A_OFF)
    1c00:	e9 81       	ldd	r30, Y+1	; 0x01
    1c02:	fa 81       	ldd	r31, Y+2	; 0x02
    1c04:	82 81       	ldd	r24, Z+2	; 0x02
    1c06:	88 23       	and	r24, r24
    1c08:	41 f4       	brne	.+16     	; 0x1c1a <TIMER1_VidInit+0x180>
		{
			TCCR1A &= ~(1<<COM1A1)&(~(1<<COM1A0))&(~(1<<COM1B1))&(~(1<<COM1B0));
    1c0a:	af e4       	ldi	r26, 0x4F	; 79
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	ef e4       	ldi	r30, 0x4F	; 79
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	8f 70       	andi	r24, 0x0F	; 15
    1c16:	8c 93       	st	X, r24
    1c18:	34 c0       	rjmp	.+104    	; 0x1c82 <TIMER1_VidInit+0x1e8>
		}
		else if(a_ptr->Oc1A==OC1A_TOG)
    1c1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c1e:	82 81       	ldd	r24, Z+2	; 0x02
    1c20:	81 30       	cpi	r24, 0x01	; 1
    1c22:	79 f4       	brne	.+30     	; 0x1c42 <TIMER1_VidInit+0x1a8>
		{
			TCCR1A &= ~(1<<COM1A1)&(~(1<<COM1B1));
    1c24:	af e4       	ldi	r26, 0x4F	; 79
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	ef e4       	ldi	r30, 0x4F	; 79
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	8f 75       	andi	r24, 0x5F	; 95
    1c30:	8c 93       	st	X, r24
			TCCR1A |= (1<<COM1A0)|(1<<COM1B0);
    1c32:	af e4       	ldi	r26, 0x4F	; 79
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	ef e4       	ldi	r30, 0x4F	; 79
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	80 65       	ori	r24, 0x50	; 80
    1c3e:	8c 93       	st	X, r24
    1c40:	20 c0       	rjmp	.+64     	; 0x1c82 <TIMER1_VidInit+0x1e8>
		}
		else if(a_ptr->Oc1A==OC1A_CLR)
    1c42:	e9 81       	ldd	r30, Y+1	; 0x01
    1c44:	fa 81       	ldd	r31, Y+2	; 0x02
    1c46:	82 81       	ldd	r24, Z+2	; 0x02
    1c48:	82 30       	cpi	r24, 0x02	; 2
    1c4a:	79 f4       	brne	.+30     	; 0x1c6a <TIMER1_VidInit+0x1d0>
		{
			TCCR1A &= ~(1<<COM1A0)&(~(1<<COM1B0));
    1c4c:	af e4       	ldi	r26, 0x4F	; 79
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	ef e4       	ldi	r30, 0x4F	; 79
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	8f 7a       	andi	r24, 0xAF	; 175
    1c58:	8c 93       	st	X, r24
			TCCR1A |= (1<<COM1A1)|(1<<COM1B1);
    1c5a:	af e4       	ldi	r26, 0x4F	; 79
    1c5c:	b0 e0       	ldi	r27, 0x00	; 0
    1c5e:	ef e4       	ldi	r30, 0x4F	; 79
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	80 81       	ld	r24, Z
    1c64:	80 6a       	ori	r24, 0xA0	; 160
    1c66:	8c 93       	st	X, r24
    1c68:	0c c0       	rjmp	.+24     	; 0x1c82 <TIMER1_VidInit+0x1e8>
		}
		else if(a_ptr->Oc1A==OC1A_SET)
    1c6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c6e:	82 81       	ldd	r24, Z+2	; 0x02
    1c70:	83 30       	cpi	r24, 0x03	; 3
    1c72:	39 f4       	brne	.+14     	; 0x1c82 <TIMER1_VidInit+0x1e8>
		{
			TCCR1A |= (1<<COM1A1)|(1<<COM1A0)|(1<<COM1B1)|(1<<COM1B0);
    1c74:	af e4       	ldi	r26, 0x4F	; 79
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	ef e4       	ldi	r30, 0x4F	; 79
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	80 6f       	ori	r24, 0xF0	; 240
    1c80:	8c 93       	st	X, r24
		}
		TCCR1B=(TCCR1B & 0xF8)|(a_ptr->Clk);
    1c82:	ae e4       	ldi	r26, 0x4E	; 78
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	ee e4       	ldi	r30, 0x4E	; 78
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	98 2f       	mov	r25, r24
    1c8e:	98 7f       	andi	r25, 0xF8	; 248
    1c90:	e9 81       	ldd	r30, Y+1	; 0x01
    1c92:	fa 81       	ldd	r31, Y+2	; 0x02
    1c94:	81 81       	ldd	r24, Z+1	; 0x01
    1c96:	89 2b       	or	r24, r25
    1c98:	8c 93       	st	X, r24
		OCR1A=a_SetCompare;
    1c9a:	ea e4       	ldi	r30, 0x4A	; 74
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca2:	91 83       	std	Z+1, r25	; 0x01
    1ca4:	80 83       	st	Z, r24
		TCNT1=a_SetInitialValue;
    1ca6:	ec e4       	ldi	r30, 0x4C	; 76
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	9c 81       	ldd	r25, Y+4	; 0x04
    1cae:	91 83       	std	Z+1, r25	; 0x01
    1cb0:	80 83       	st	Z, r24
		TCCR1A |=(1<<WGM11)|(1<<WGM10);
    1cb2:	af e4       	ldi	r26, 0x4F	; 79
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	ef e4       	ldi	r30, 0x4F	; 79
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	83 60       	ori	r24, 0x03	; 3
    1cbe:	8c 93       	st	X, r24
		TCCR1B|=(1<<WGM12)|(1<<WGM13);
    1cc0:	ae e4       	ldi	r26, 0x4E	; 78
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	ee e4       	ldi	r30, 0x4E	; 78
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	88 61       	ori	r24, 0x18	; 24
    1ccc:	8c 93       	st	X, r24
		DDRD|=(1<<PD5);
    1cce:	a1 e3       	ldi	r26, 0x31	; 49
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e1 e3       	ldi	r30, 0x31	; 49
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	80 62       	ori	r24, 0x20	; 32
    1cda:	8c 93       	st	X, r24

	}
}
    1cdc:	26 96       	adiw	r28, 0x06	; 6
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	de bf       	out	0x3e, r29	; 62
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	cd bf       	out	0x3d, r28	; 61
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	08 95       	ret

00001cee <TIMER1_OVF_setInitialVal>:


void TIMER1_OVF_setInitialVal(uint16 a_setInitialVal)
{
    1cee:	df 93       	push	r29
    1cf0:	cf 93       	push	r28
    1cf2:	00 d0       	rcall	.+0      	; 0x1cf4 <TIMER1_OVF_setInitialVal+0x6>
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
    1cf8:	9a 83       	std	Y+2, r25	; 0x02
    1cfa:	89 83       	std	Y+1, r24	; 0x01
	TCNT1= a_setInitialVal;
    1cfc:	ec e4       	ldi	r30, 0x4C	; 76
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	9a 81       	ldd	r25, Y+2	; 0x02
    1d04:	91 83       	std	Z+1, r25	; 0x01
    1d06:	80 83       	st	Z, r24
}
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	08 95       	ret

00001d12 <TIMER1_CTC_setCompValue>:

void TIMER1_CTC_setCompValue(uint8 a_SetCompare)
{
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	0f 92       	push	r0
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=a_SetCompare;
    1d1e:	ea e4       	ldi	r30, 0x4A	; 74
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	88 2f       	mov	r24, r24
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	91 83       	std	Z+1, r25	; 0x01
    1d2a:	80 83       	st	Z, r24
}
    1d2c:	0f 90       	pop	r0
    1d2e:	cf 91       	pop	r28
    1d30:	df 91       	pop	r29
    1d32:	08 95       	ret

00001d34 <TIMER1_CTC_SetCallBack>:


void TIMER1_CTC_SetCallBack(void (*a_callBackPtr)(void))
{
    1d34:	df 93       	push	r29
    1d36:	cf 93       	push	r28
    1d38:	00 d0       	rcall	.+0      	; 0x1d3a <TIMER1_CTC_SetCallBack+0x6>
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
    1d3e:	9a 83       	std	Y+2, r25	; 0x02
    1d40:	89 83       	std	Y+1, r24	; 0x01
	g_timer1ctcCallBackPtr=a_callBackPtr;
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	9a 81       	ldd	r25, Y+2	; 0x02
    1d46:	90 93 6f 01 	sts	0x016F, r25
    1d4a:	80 93 6e 01 	sts	0x016E, r24
}
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	cf 91       	pop	r28
    1d54:	df 91       	pop	r29
    1d56:	08 95       	ret

00001d58 <TIMER1_OVF_SetCallBack>:

void TIMER1_OVF_SetCallBack(void (*a_callBackPtr)(void))
{
    1d58:	df 93       	push	r29
    1d5a:	cf 93       	push	r28
    1d5c:	00 d0       	rcall	.+0      	; 0x1d5e <TIMER1_OVF_SetCallBack+0x6>
    1d5e:	cd b7       	in	r28, 0x3d	; 61
    1d60:	de b7       	in	r29, 0x3e	; 62
    1d62:	9a 83       	std	Y+2, r25	; 0x02
    1d64:	89 83       	std	Y+1, r24	; 0x01
	g_timer1ovfCallBackPtr=a_callBackPtr;
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6a:	90 93 71 01 	sts	0x0171, r25
    1d6e:	80 93 70 01 	sts	0x0170, r24
}
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	cf 91       	pop	r28
    1d78:	df 91       	pop	r29
    1d7a:	08 95       	ret

00001d7c <UART_VidInit>:
 *      Author: micheal_onsy
 */
#include "UART.h"

void UART_VidInit(UART_Config *a_ptr,uint16 a_BoudRate)
{
    1d7c:	df 93       	push	r29
    1d7e:	cf 93       	push	r28
    1d80:	00 d0       	rcall	.+0      	; 0x1d82 <UART_VidInit+0x6>
    1d82:	00 d0       	rcall	.+0      	; 0x1d84 <UART_VidInit+0x8>
    1d84:	cd b7       	in	r28, 0x3d	; 61
    1d86:	de b7       	in	r29, 0x3e	; 62
    1d88:	9a 83       	std	Y+2, r25	; 0x02
    1d8a:	89 83       	std	Y+1, r24	; 0x01
    1d8c:	7c 83       	std	Y+4, r23	; 0x04
    1d8e:	6b 83       	std	Y+3, r22	; 0x03
	// Enable Transmit
	SET_BIT(UCSRB,TXEN);
    1d90:	aa e2       	ldi	r26, 0x2A	; 42
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	ea e2       	ldi	r30, 0x2A	; 42
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	88 60       	ori	r24, 0x08	; 8
    1d9c:	8c 93       	st	X, r24
	//Enable Receive
	SET_BIT(UCSRB,RXEN);
    1d9e:	aa e2       	ldi	r26, 0x2A	; 42
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	ea e2       	ldi	r30, 0x2A	; 42
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	80 61       	ori	r24, 0x10	; 16
    1daa:	8c 93       	st	X, r24
	 * else
	 * No code in UART_AsyncNormal U2x=0 UMSEL=0
	 * else
	 * in UART_AsyncDouble set bit U2X
	 *  */
	UCSRC|= (1<<URSEL);//To Write in Register UCSRC
    1dac:	a0 e4       	ldi	r26, 0x40	; 64
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	e0 e4       	ldi	r30, 0x40	; 64
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	80 68       	ori	r24, 0x80	; 128
    1db8:	8c 93       	st	X, r24
		// Character Size
		UCSRC=(UCSRC & 0xF9)|(((a_ptr->DataSize) & 0x03)<<UCSZ0);
		UCSRB=(UCSRB & 0xFB)|((((a_ptr->DataSize) & 0x04)>>2)<<UCSZ2);

	}*/
	 if (a_ptr->Mode==UART_AsyncDouble)
    1dba:	e9 81       	ldd	r30, Y+1	; 0x01
    1dbc:	fa 81       	ldd	r31, Y+2	; 0x02
    1dbe:	82 81       	ldd	r24, Z+2	; 0x02
    1dc0:	81 30       	cpi	r24, 0x01	; 1
    1dc2:	39 f4       	brne	.+14     	; 0x1dd2 <UART_VidInit+0x56>
	{
		UCSRA |=  (1<<U2X);
    1dc4:	ab e2       	ldi	r26, 0x2B	; 43
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	eb e2       	ldi	r30, 0x2B	; 43
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	82 60       	ori	r24, 0x02	; 2
    1dd0:	8c 93       	st	X, r24
	}

	if (a_ptr->Mode != UART_Sync)
    1dd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd6:	82 81       	ldd	r24, Z+2	; 0x02
    1dd8:	82 30       	cpi	r24, 0x02	; 2
    1dda:	09 f4       	brne	.+2      	; 0x1dde <UART_VidInit+0x62>
    1ddc:	4d c0       	rjmp	.+154    	; 0x1e78 <UART_VidInit+0xfc>
	{
		//parity
		UCSRC=(UCSRC & 0xCF)|((a_ptr->Parity)<<UPM0);
    1dde:	a0 e4       	ldi	r26, 0x40	; 64
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	e0 e4       	ldi	r30, 0x40	; 64
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	28 2f       	mov	r18, r24
    1dea:	2f 7c       	andi	r18, 0xCF	; 207
    1dec:	e9 81       	ldd	r30, Y+1	; 0x01
    1dee:	fa 81       	ldd	r31, Y+2	; 0x02
    1df0:	83 81       	ldd	r24, Z+3	; 0x03
    1df2:	88 2f       	mov	r24, r24
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	82 95       	swap	r24
    1df8:	92 95       	swap	r25
    1dfa:	90 7f       	andi	r25, 0xF0	; 240
    1dfc:	98 27       	eor	r25, r24
    1dfe:	80 7f       	andi	r24, 0xF0	; 240
    1e00:	98 27       	eor	r25, r24
    1e02:	82 2b       	or	r24, r18
    1e04:	8c 93       	st	X, r24
		//StopBit
		UCSRC|=(a_ptr->StopBit)<<USBS;
    1e06:	a0 e4       	ldi	r26, 0x40	; 64
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e0 e4       	ldi	r30, 0x40	; 64
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	28 2f       	mov	r18, r24
    1e12:	e9 81       	ldd	r30, Y+1	; 0x01
    1e14:	fa 81       	ldd	r31, Y+2	; 0x02
    1e16:	80 81       	ld	r24, Z
    1e18:	88 2f       	mov	r24, r24
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	88 0f       	add	r24, r24
    1e1e:	99 1f       	adc	r25, r25
    1e20:	88 0f       	add	r24, r24
    1e22:	99 1f       	adc	r25, r25
    1e24:	88 0f       	add	r24, r24
    1e26:	99 1f       	adc	r25, r25
    1e28:	82 2b       	or	r24, r18
    1e2a:	8c 93       	st	X, r24
		// Character Size
		UCSRC=(UCSRC & 0xF9)|(((a_ptr->DataSize) & 0x03)<<UCSZ0);
    1e2c:	a0 e4       	ldi	r26, 0x40	; 64
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e0 e4       	ldi	r30, 0x40	; 64
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	28 2f       	mov	r18, r24
    1e38:	29 7f       	andi	r18, 0xF9	; 249
    1e3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e3e:	81 81       	ldd	r24, Z+1	; 0x01
    1e40:	88 2f       	mov	r24, r24
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	83 70       	andi	r24, 0x03	; 3
    1e46:	90 70       	andi	r25, 0x00	; 0
    1e48:	88 0f       	add	r24, r24
    1e4a:	99 1f       	adc	r25, r25
    1e4c:	82 2b       	or	r24, r18
    1e4e:	8c 93       	st	X, r24
		UCSRB=(UCSRB & 0xFB)|(((a_ptr->DataSize) & 0x04)<<UCSZ2);
    1e50:	aa e2       	ldi	r26, 0x2A	; 42
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	ea e2       	ldi	r30, 0x2A	; 42
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	28 2f       	mov	r18, r24
    1e5c:	2b 7f       	andi	r18, 0xFB	; 251
    1e5e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e60:	fa 81       	ldd	r31, Y+2	; 0x02
    1e62:	81 81       	ldd	r24, Z+1	; 0x01
    1e64:	88 2f       	mov	r24, r24
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	84 70       	andi	r24, 0x04	; 4
    1e6a:	90 70       	andi	r25, 0x00	; 0
    1e6c:	88 0f       	add	r24, r24
    1e6e:	99 1f       	adc	r25, r25
    1e70:	88 0f       	add	r24, r24
    1e72:	99 1f       	adc	r25, r25
    1e74:	82 2b       	or	r24, r18
    1e76:	8c 93       	st	X, r24
		UCSRB=(UCSRB & 0xFB)|(((a_ptr->DataSize) & 0x04)<<UCSZ2);
	}
	 */

	//BoudRate
	if (a_ptr->Mode == UART_AsyncNormal)
    1e78:	e9 81       	ldd	r30, Y+1	; 0x01
    1e7a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e7c:	82 81       	ldd	r24, Z+2	; 0x02
    1e7e:	88 23       	and	r24, r24
    1e80:	61 f5       	brne	.+88     	; 0x1eda <UART_VidInit+0x15e>
	{
		a_BoudRate= ((float32)F_CPU/(16*a_BoudRate))-1;
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	9c 81       	ldd	r25, Y+4	; 0x04
    1e86:	82 95       	swap	r24
    1e88:	92 95       	swap	r25
    1e8a:	90 7f       	andi	r25, 0xF0	; 240
    1e8c:	98 27       	eor	r25, r24
    1e8e:	80 7f       	andi	r24, 0xF0	; 240
    1e90:	98 27       	eor	r25, r24
    1e92:	cc 01       	movw	r24, r24
    1e94:	a0 e0       	ldi	r26, 0x00	; 0
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	bc 01       	movw	r22, r24
    1e9a:	cd 01       	movw	r24, r26
    1e9c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1ea0:	9b 01       	movw	r18, r22
    1ea2:	ac 01       	movw	r20, r24
    1ea4:	60 e0       	ldi	r22, 0x00	; 0
    1ea6:	74 e2       	ldi	r23, 0x24	; 36
    1ea8:	84 ef       	ldi	r24, 0xF4	; 244
    1eaa:	9a e4       	ldi	r25, 0x4A	; 74
    1eac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	bc 01       	movw	r22, r24
    1eb6:	cd 01       	movw	r24, r26
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	40 e8       	ldi	r20, 0x80	; 128
    1ebe:	5f e3       	ldi	r21, 0x3F	; 63
    1ec0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	bc 01       	movw	r22, r24
    1eca:	cd 01       	movw	r24, r26
    1ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	9c 83       	std	Y+4, r25	; 0x04
    1ed6:	8b 83       	std	Y+3, r24	; 0x03
    1ed8:	5d c0       	rjmp	.+186    	; 0x1f94 <UART_VidInit+0x218>
	}
	else if (a_ptr->Mode == UART_AsyncDouble)
    1eda:	e9 81       	ldd	r30, Y+1	; 0x01
    1edc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ede:	82 81       	ldd	r24, Z+2	; 0x02
    1ee0:	81 30       	cpi	r24, 0x01	; 1
    1ee2:	61 f5       	brne	.+88     	; 0x1f3c <UART_VidInit+0x1c0>
	{
		a_BoudRate= ((float32)F_CPU/(8*a_BoudRate))-1;
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee8:	88 0f       	add	r24, r24
    1eea:	99 1f       	adc	r25, r25
    1eec:	88 0f       	add	r24, r24
    1eee:	99 1f       	adc	r25, r25
    1ef0:	88 0f       	add	r24, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	cc 01       	movw	r24, r24
    1ef6:	a0 e0       	ldi	r26, 0x00	; 0
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	bc 01       	movw	r22, r24
    1efc:	cd 01       	movw	r24, r26
    1efe:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1f02:	9b 01       	movw	r18, r22
    1f04:	ac 01       	movw	r20, r24
    1f06:	60 e0       	ldi	r22, 0x00	; 0
    1f08:	74 e2       	ldi	r23, 0x24	; 36
    1f0a:	84 ef       	ldi	r24, 0xF4	; 244
    1f0c:	9a e4       	ldi	r25, 0x4A	; 74
    1f0e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	bc 01       	movw	r22, r24
    1f18:	cd 01       	movw	r24, r26
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	40 e8       	ldi	r20, 0x80	; 128
    1f20:	5f e3       	ldi	r21, 0x3F	; 63
    1f22:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	bc 01       	movw	r22, r24
    1f2c:	cd 01       	movw	r24, r26
    1f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	9c 83       	std	Y+4, r25	; 0x04
    1f38:	8b 83       	std	Y+3, r24	; 0x03
    1f3a:	2c c0       	rjmp	.+88     	; 0x1f94 <UART_VidInit+0x218>
	}
	else if (a_ptr->Mode == UART_Sync)
    1f3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f40:	82 81       	ldd	r24, Z+2	; 0x02
    1f42:	82 30       	cpi	r24, 0x02	; 2
    1f44:	39 f5       	brne	.+78     	; 0x1f94 <UART_VidInit+0x218>
	{
		a_BoudRate= ((float32)F_CPU/(2*a_BoudRate))-1;
    1f46:	8b 81       	ldd	r24, Y+3	; 0x03
    1f48:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4a:	88 0f       	add	r24, r24
    1f4c:	99 1f       	adc	r25, r25
    1f4e:	cc 01       	movw	r24, r24
    1f50:	a0 e0       	ldi	r26, 0x00	; 0
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	bc 01       	movw	r22, r24
    1f56:	cd 01       	movw	r24, r26
    1f58:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1f5c:	9b 01       	movw	r18, r22
    1f5e:	ac 01       	movw	r20, r24
    1f60:	60 e0       	ldi	r22, 0x00	; 0
    1f62:	74 e2       	ldi	r23, 0x24	; 36
    1f64:	84 ef       	ldi	r24, 0xF4	; 244
    1f66:	9a e4       	ldi	r25, 0x4A	; 74
    1f68:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	bc 01       	movw	r22, r24
    1f72:	cd 01       	movw	r24, r26
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	40 e8       	ldi	r20, 0x80	; 128
    1f7a:	5f e3       	ldi	r21, 0x3F	; 63
    1f7c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	bc 01       	movw	r22, r24
    1f86:	cd 01       	movw	r24, r26
    1f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	9c 83       	std	Y+4, r25	; 0x04
    1f92:	8b 83       	std	Y+3, r24	; 0x03
	}

	UCSRC&=~(1<<URSEL);
    1f94:	a0 e4       	ldi	r26, 0x40	; 64
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	e0 e4       	ldi	r30, 0x40	; 64
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	8f 77       	andi	r24, 0x7F	; 127
    1fa0:	8c 93       	st	X, r24
	UBRRL=a_BoudRate;
    1fa2:	e9 e2       	ldi	r30, 0x29	; 41
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa8:	80 83       	st	Z, r24
	UBRRH=(a_BoudRate>>8);
    1faa:	e0 e4       	ldi	r30, 0x40	; 64
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb2:	89 2f       	mov	r24, r25
    1fb4:	99 27       	eor	r25, r25
    1fb6:	80 83       	st	Z, r24

}
    1fb8:	0f 90       	pop	r0
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	cf 91       	pop	r28
    1fc2:	df 91       	pop	r29
    1fc4:	08 95       	ret

00001fc6 <UART_u8Recive>:
uint8 UART_u8Recive(void)
{
    1fc6:	df 93       	push	r29
    1fc8:	cf 93       	push	r28
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
	while(!(UCSRA & (1<<RXC)));
    1fce:	eb e2       	ldi	r30, 0x2B	; 43
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	88 23       	and	r24, r24
    1fd6:	dc f7       	brge	.-10     	; 0x1fce <UART_u8Recive+0x8>
	return UDR;
    1fd8:	ec e2       	ldi	r30, 0x2C	; 44
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
}
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	08 95       	ret

00001fe4 <UART_VidSend>:
void UART_VidSend(uint8 a_Data)
{
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	0f 92       	push	r0
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
    1fee:	89 83       	std	Y+1, r24	; 0x01
	UDR=a_Data;
    1ff0:	ec e2       	ldi	r30, 0x2C	; 44
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	80 83       	st	Z, r24
	while(!(UCSRA & (1<<UDRE)));
    1ff8:	eb e2       	ldi	r30, 0x2B	; 43
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	88 2f       	mov	r24, r24
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	80 72       	andi	r24, 0x20	; 32
    2004:	90 70       	andi	r25, 0x00	; 0
    2006:	00 97       	sbiw	r24, 0x00	; 0
    2008:	b9 f3       	breq	.-18     	; 0x1ff8 <UART_VidSend+0x14>
}
    200a:	0f 90       	pop	r0
    200c:	cf 91       	pop	r28
    200e:	df 91       	pop	r29
    2010:	08 95       	ret

00002012 <__prologue_saves__>:
    2012:	2f 92       	push	r2
    2014:	3f 92       	push	r3
    2016:	4f 92       	push	r4
    2018:	5f 92       	push	r5
    201a:	6f 92       	push	r6
    201c:	7f 92       	push	r7
    201e:	8f 92       	push	r8
    2020:	9f 92       	push	r9
    2022:	af 92       	push	r10
    2024:	bf 92       	push	r11
    2026:	cf 92       	push	r12
    2028:	df 92       	push	r13
    202a:	ef 92       	push	r14
    202c:	ff 92       	push	r15
    202e:	0f 93       	push	r16
    2030:	1f 93       	push	r17
    2032:	cf 93       	push	r28
    2034:	df 93       	push	r29
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
    203a:	ca 1b       	sub	r28, r26
    203c:	db 0b       	sbc	r29, r27
    203e:	0f b6       	in	r0, 0x3f	; 63
    2040:	f8 94       	cli
    2042:	de bf       	out	0x3e, r29	; 62
    2044:	0f be       	out	0x3f, r0	; 63
    2046:	cd bf       	out	0x3d, r28	; 61
    2048:	09 94       	ijmp

0000204a <__epilogue_restores__>:
    204a:	2a 88       	ldd	r2, Y+18	; 0x12
    204c:	39 88       	ldd	r3, Y+17	; 0x11
    204e:	48 88       	ldd	r4, Y+16	; 0x10
    2050:	5f 84       	ldd	r5, Y+15	; 0x0f
    2052:	6e 84       	ldd	r6, Y+14	; 0x0e
    2054:	7d 84       	ldd	r7, Y+13	; 0x0d
    2056:	8c 84       	ldd	r8, Y+12	; 0x0c
    2058:	9b 84       	ldd	r9, Y+11	; 0x0b
    205a:	aa 84       	ldd	r10, Y+10	; 0x0a
    205c:	b9 84       	ldd	r11, Y+9	; 0x09
    205e:	c8 84       	ldd	r12, Y+8	; 0x08
    2060:	df 80       	ldd	r13, Y+7	; 0x07
    2062:	ee 80       	ldd	r14, Y+6	; 0x06
    2064:	fd 80       	ldd	r15, Y+5	; 0x05
    2066:	0c 81       	ldd	r16, Y+4	; 0x04
    2068:	1b 81       	ldd	r17, Y+3	; 0x03
    206a:	aa 81       	ldd	r26, Y+2	; 0x02
    206c:	b9 81       	ldd	r27, Y+1	; 0x01
    206e:	ce 0f       	add	r28, r30
    2070:	d1 1d       	adc	r29, r1
    2072:	0f b6       	in	r0, 0x3f	; 63
    2074:	f8 94       	cli
    2076:	de bf       	out	0x3e, r29	; 62
    2078:	0f be       	out	0x3f, r0	; 63
    207a:	cd bf       	out	0x3d, r28	; 61
    207c:	ed 01       	movw	r28, r26
    207e:	08 95       	ret

00002080 <_exit>:
    2080:	f8 94       	cli

00002082 <__stop_program>:
    2082:	ff cf       	rjmp	.-2      	; 0x2082 <__stop_program>
